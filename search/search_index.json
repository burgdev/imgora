{"config":{"lang":["en"],"separator":"[\\s\\u200b\\-_,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Getting Started","text":""},{"location":"#getting-started","title":"Getting Started","text":"<p>Imgora is used to generate image URLs for Imagor, Thumbor and wsrv.nl image processing servers.</p> <p>Imgora provides a clean, chainable interface for generating image URLs for Imagor, Thumbor and Wsrv.nl image processing servers. It supports all standard operations and filters with full type hints and documentation.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Imagor, Thumbor &amp; Wsrv.nl Support: Compatible with Imagor, Thumbor and Wsrv.nl servers</li> <li>URL Signing: Built-in support for secure URL signing</li> <li>Chainable API: Fluent interface for building complex image processing pipelines</li> <li>Comprehensive Filter Support: Implements all standard filters and operations</li> <li>Fully Typed: Built with Python's type hints for better IDE support and code quality</li> </ul>"},{"location":"#installation","title":"Installation","text":"<p>Using uv (recommended): <pre><code>uv pip install imgora\n</code></pre></p> <p>Or with pip: <pre><code>pip install imgora\n</code></pre></p>"},{"location":"#quick-start","title":"Quick Start","text":"<p><pre><code>from imgora import WsrvNl\n\nimage_url = \"https://wsrv.nl/puppy.jpg\"\n\nimg = (\n    # Imagor(base_url=\"http://localhost:8018\", signer=Signer(key=\"my_key\", type=\"sha256\"))\n    WsrvNl()\n    .with_image(image_url)\n    .crop(0.1, 0.2, 0.6, -100)\n    .resize(200, 150)\n    .blur(3)\n    .grayscale()\n    .quality(50)\n)\n\n# print(img.path()) # path without url\nprint(img.url())\n</code></pre> Which returns:</p> <pre><code>https://wsrv.nl/?url=https%3A%2F%2Fwsrv.nl%2Fpuppy.jpg&amp;cx=166&amp;cy=221&amp;cw=831&amp;ch=787&amp;precrop&amp;w=200&amp;h=150&amp;blur=2.50&amp;filt=greyscale&amp;quality=50\n</code></pre> Processed image <p></p> Original image (width reduced to 400px) <p></p> <p>NOTE:</p> <p>In order to test the url with Imagor or Thumbor you need to start a server. You can do this with the following command:</p> <pre><code>docker compose up imagor -d\ndocker compose up thumbor -d\n</code></pre>"},{"location":"#more-examples","title":"More Examples","text":"<pre><code>docker compose up -d # start imagor and thumbor server\nuv run examples/compare_backends.py\n</code></pre>"},{"location":"#development","title":"Development","text":"<p>To set up the development environment:</p> <pre><code># Clone the repository\ngit clone https://github.com/burgdev/imgora.git\ncd imgora\n\n# Install development dependencies\nmake\nuv run invoke install # install 'dev' and 'test' dependencies per default, use --all to install all dependencies\n</code></pre>"},{"location":"changelog/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.</p>"},{"location":"changelog/#001-2025-09-10","title":"0.0.1 - 2025-09-10","text":"<p>\ud83d\ude80 Initial release.</p>"},{"location":"packages/","title":"Packages","text":""},{"location":"packages/#pypi","title":"PyPi","text":"<p>The package is published to PyPi package.</p> <code>uv</code><code>pipx</code><code>pip</code> <p>Run it as <code>uv</code> tool:</p> <pre><code>$ uvx imgora [OPTIONS] [ARGS]...\n</code></pre> <p>Install it in isolated environment with <code>pipx</code>:</p> <pre><code>$ pipx install imgora\n$ imgora [OPTIONS] [COMMAND] [ARGS]...\n</code></pre> <p>Install it with <code>pip</code>:</p> <pre><code>$ pip install imgora\n$ imgora [OPTIONS] COMMAND [ARGS]...\n</code></pre>"},{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li>imgora<ul> <li>decorator</li> </ul> </li> </ul>"},{"location":"reference/imgora/","title":"imgora","text":""},{"location":"reference/imgora/#imgora","title":"imgora","text":"<p>Imgora - Chainable image URL generator for Imagor and Thumbor.</p> <p>This package provides a Pythonic, chainable interface for generating image URLs for Imagor and Thumbor image processing servers. It supports all standard filters and operations with full type hints and documentation.</p> Example <pre><code>from imgora import Imagor\nurl = (Imagor(key=\"secret\")\n        .fit_in(300, 300)\n        .blur(5)\n        .radius(10)\n        .with_base(\"https://example.com\")\n        .with_image(\"image.jpg\")\n        .url())\n</code></pre> <p>Modules:</p> <ul> <li> <code>decorator</code>           \u2013            <p>Decorators for imgora.</p> </li> </ul> <p>Classes:</p> <ul> <li> <code>BaseImage</code>           \u2013            <p>Base class for image URL generation.</p> </li> <li> <code>Filter</code>           \u2013            <p>Represents an image processing filter.</p> </li> <li> <code>Operation</code>           \u2013            <p>Represents an image processing operation.</p> </li> <li> <code>Signer</code>           \u2013            <p>Signer class for URL signing.</p> </li> <li> <code>Imagor</code>           \u2013            <p>Imagor image processor with Imagor-specific operations and filters.</p> </li> <li> <code>Thumbor</code>           \u2013            <p>Thumbor image processor with Thumbor-specific operations and filters.</p> </li> <li> <code>WsrvNl</code>           \u2013            <p>wsrv.nl image processor with wsrv-specific operations and filters.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>HALIGN</code>               (<code>TypeAlias</code>)           \u2013            <p>Horizontal alignment values type.</p> </li> <li> <code>VALIGN</code>               (<code>TypeAlias</code>)           \u2013            <p>Vertical alignment values type.</p> </li> <li> <code>ImageFormats</code>               (<code>TypeAlias</code>)           \u2013            <p>Image formats.</p> </li> </ul>"},{"location":"reference/imgora/#imgora-attributes","title":"Attributes","text":""},{"location":"reference/imgora/#imgora.HALIGN","title":"HALIGN  <code>module-attribute</code>","text":"<pre><code>HALIGN: TypeAlias = Literal['left', 'center', 'right']\n</code></pre> <p>Horizontal alignment values type.</p>"},{"location":"reference/imgora/#imgora.VALIGN","title":"VALIGN  <code>module-attribute</code>","text":"<pre><code>VALIGN: TypeAlias = Literal['top', 'middle', 'bottom']\n</code></pre> <p>Vertical alignment values type.</p>"},{"location":"reference/imgora/#imgora.ImageFormats","title":"ImageFormats  <code>module-attribute</code>","text":"<pre><code>ImageFormats: TypeAlias = Literal[\n    \"jpg\", \"png\", \"webp\", \"gif\"\n]\n</code></pre> <p>Image formats.</p>"},{"location":"reference/imgora/#imgora.__version__","title":"__version__  <code>module-attribute</code>","text":"<pre><code>__version__ = '0.0.1'\n</code></pre>"},{"location":"reference/imgora/#imgora-classes","title":"Classes","text":""},{"location":"reference/imgora/#imgora.BaseImage","title":"BaseImage","text":"<pre><code>BaseImage(\n    base_url: str = \"\",\n    image: str = \"\",\n    signer: Signer | None = None,\n)\n</code></pre> <p>Base class for image URL generation.</p> <p>This class provides the core functionality for building image URLs with chained operations and filters. It should not be instantiated directly; use one of the subclasses (Imagor or Thumbor) instead.</p> <p>Initialize a new image processor.</p> <p>Parameters:</p> <p>Methods:</p> <ul> <li> <code>add_operation</code>             \u2013              <p>Add an operation to the image processing pipeline.</p> </li> <li> <code>add_filter</code>             \u2013              <p>Add a filter to the image processing pipeline.</p> </li> <li> <code>remove</code>             \u2013              <p>Remove an operation or filter from the image processing pipeline by name.</p> </li> <li> <code>remove_filters</code>             \u2013              <p>Remove all filters from the image processing pipeline.</p> </li> <li> <code>remove_operations</code>             \u2013              <p>Remove all operations from the image processing pipeline.</p> </li> <li> <code>get_filter</code>             \u2013              <p>Get a filter by name.</p> </li> <li> <code>get_operation</code>             \u2013              <p>Get an operation by name.</p> </li> <li> <code>with_image</code>             \u2013              <p>Set the source image.</p> </li> <li> <code>with_base</code>             \u2013              <p>Set the base URL of the Imagor/Thumbor server.</p> </li> <li> <code>path</code>             \u2013              <p>Generate the URL path with all operations and filters applied.</p> </li> <li> <code>url</code>             \u2013              <p>Generate the full URL.</p> </li> <li> <code>sign_path</code>             \u2013              <p>Sign a URL path using HMAC.</p> </li> <li> <code>encode_image_path</code>             \u2013              <p>Encode the image path with <code>urllib.parse.quote</code>.</p> </li> <li> <code>sign</code>             \u2013              <p>Set the signer.</p> </li> <li> <code>unsafe</code>             \u2013              <p>Set the signer to unsafe.</p> </li> <li> <code>get_size</code>             \u2013              <p>Returns the image size.</p> </li> <li> <code>trim</code>             \u2013              <p>Trim the image.</p> </li> <li> <code>crop</code>             \u2013              <p>Manually crop the image. Coordinates are in pixel or float values between 0 and 1 (percentage of image dimensions)</p> </li> <li> <code>resize</code>             \u2013              <p>Resize the image to the exact dimensions.</p> </li> <li> <code>meta</code>             \u2013              <p>Shows meta information of the image.</p> </li> <li> <code>background_color</code>             \u2013              <p>The <code>background_color</code> filter sets the background layer to the specified color.</p> </li> <li> <code>blur</code>             \u2013              <p>Apply gaussian blur to the image.</p> </li> <li> <code>brightness</code>             \u2013              <p>Adjust brightness of the image.</p> </li> <li> <code>contrast</code>             \u2013              <p>Adjust contrast of the image.</p> </li> <li> <code>rgb</code>             \u2013              <p>Adjust the RGB channels of the image.</p> </li> <li> <code>focal</code>             \u2013              <p>Set the focal point of the image, which is used in later transforms (e.g. <code>crop</code>).</p> </li> <li> <code>quality</code>             \u2013              <p>Set the image quality (JPEG only).</p> </li> <li> <code>round_corner</code>             \u2013              <p>Add rounded corners to the image.</p> </li> <li> <code>radius</code>             \u2013              <p>Add rounded corners to the image (alias for round_corner).</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>signer</code>               (<code>Signer | None</code>)           \u2013            </li> <li> <code>op_order</code>               (<code>tuple[str, ...]</code>)           \u2013            <p>Returns the operation order</p> </li> </ul>"},{"location":"reference/imgora/#imgora.BaseImage(base_url)","title":"<code>base_url</code>","text":"(<code>str</code>, default:                   <code>''</code> )           \u2013            <p>Base URL of the Imagor/Thumbor server.</p>"},{"location":"reference/imgora/#imgora.BaseImage(image)","title":"<code>image</code>","text":"(<code>str</code>, default:                   <code>''</code> )           \u2013            <p>Path or URL of the source image.</p>"},{"location":"reference/imgora/#imgora.BaseImage(signer)","title":"<code>signer</code>","text":"(<code>Signer | None</code>, default:                   <code>None</code> )           \u2013            <p>The signer to use. If None the default is used.</p>"},{"location":"reference/imgora/#imgora.BaseImage-attributes","title":"Attributes","text":""},{"location":"reference/imgora/#imgora.BaseImage.signer","title":"signer  <code>property</code>","text":"<pre><code>signer: Signer | None\n</code></pre>"},{"location":"reference/imgora/#imgora.BaseImage.op_order","title":"op_order  <code>property</code> <code>writable</code>","text":"<pre><code>op_order: tuple[str, ...]\n</code></pre> <p>Returns the operation order</p>"},{"location":"reference/imgora/#imgora.BaseImage-functions","title":"Functions","text":""},{"location":"reference/imgora/#imgora.BaseImage.add_operation","title":"add_operation","text":"<pre><code>add_operation(\n    op: str | Operation,\n    arg: str | None = None,\n    unique: bool = True,\n) -&gt; None\n</code></pre> <p>Add an operation to the image processing pipeline.</p> <p>Parameters:</p>"},{"location":"reference/imgora/#imgora.BaseImage.add_operation(op)","title":"<code>op</code>","text":"(<code>str | Operation</code>)           \u2013            <p>The name of the operation or an Operation object.</p>"},{"location":"reference/imgora/#imgora.BaseImage.add_operation(arg)","title":"<code>arg</code>","text":"(<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>Optional argument for the operation.</p>"},{"location":"reference/imgora/#imgora.BaseImage.add_operation(unique)","title":"<code>unique</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Whether to remove existing operations with the same name before adding the new one.</p>"},{"location":"reference/imgora/#imgora.BaseImage.add_filter","title":"add_filter","text":"<pre><code>add_filter(\n    filter: str | Filter, *args: Any, unique: bool = True\n) -&gt; None\n</code></pre> <p>Add a filter to the image processing pipeline.</p> <p>Parameters:</p>"},{"location":"reference/imgora/#imgora.BaseImage.add_filter(filter)","title":"<code>filter</code>","text":"(<code>str | Filter</code>)           \u2013            <p>The name of the filter or a Filter object.</p>"},{"location":"reference/imgora/#imgora.BaseImage.add_filter(unique)","title":"<code>unique</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Whether to remove existing filters with the same name before adding the new one.</p>"},{"location":"reference/imgora/#imgora.BaseImage.add_filter(*args)","title":"<code>*args</code>","text":"(<code>Any</code>, default:                   <code>()</code> )           \u2013            <p>Arguments for the filter.</p>"},{"location":"reference/imgora/#imgora.BaseImage.remove","title":"remove","text":"<pre><code>remove(\n    name: str,\n    include: tuple[\n        Literal[\"operations\", \"filters\"], ...\n    ] = (\"operations\", \"filters\"),\n) -&gt; None\n</code></pre> <p>Remove an operation or filter from the image processing pipeline by name.</p> <p>For example:</p> <pre><code>image.remove(\"crop\")\nimage.remove(\"upscale\")\n</code></pre> <p>Parameters:</p>"},{"location":"reference/imgora/#imgora.BaseImage.remove(name)","title":"<code>name</code>","text":"(<code>str</code>)           \u2013            <p>The name of the operation or filter to remove.</p>"},{"location":"reference/imgora/#imgora.BaseImage.remove_filters","title":"remove_filters","text":"<pre><code>remove_filters() -&gt; None\n</code></pre> <p>Remove all filters from the image processing pipeline.</p>"},{"location":"reference/imgora/#imgora.BaseImage.remove_operations","title":"remove_operations","text":"<pre><code>remove_operations() -&gt; None\n</code></pre> <p>Remove all operations from the image processing pipeline.</p>"},{"location":"reference/imgora/#imgora.BaseImage.get_filter","title":"get_filter","text":"<pre><code>get_filter(name: str) -&gt; Filter | None\n</code></pre> <p>Get a filter by name.</p>"},{"location":"reference/imgora/#imgora.BaseImage.get_operation","title":"get_operation","text":"<pre><code>get_operation(name: str) -&gt; Operation | None\n</code></pre> <p>Get an operation by name.</p>"},{"location":"reference/imgora/#imgora.BaseImage.with_image","title":"with_image","text":"<pre><code>with_image(image: str) -&gt; Self\n</code></pre> <p>Set the source image.</p> <p>Parameters:</p>"},{"location":"reference/imgora/#imgora.BaseImage.with_image(image)","title":"<code>image</code>","text":"(<code>str</code>)           \u2013            <p>Path or URL of the source image.</p>"},{"location":"reference/imgora/#imgora.BaseImage.with_base","title":"with_base","text":"<pre><code>with_base(base_url: str) -&gt; Self\n</code></pre> <p>Set the base URL of the Imagor/Thumbor server.</p> <p>Parameters:</p>"},{"location":"reference/imgora/#imgora.BaseImage.with_base(base_url)","title":"<code>base_url</code>","text":"(<code>str</code>)           \u2013            <p>Base URL of the server.</p>"},{"location":"reference/imgora/#imgora.BaseImage.path","title":"path","text":"<pre><code>path(\n    with_image: str | None = None,\n    encode_image: bool = True,\n    signer: Signer | None = None,\n) -&gt; str\n</code></pre> <p>Generate the URL path with all operations and filters applied.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The generated URL path.</p> </li> </ul>"},{"location":"reference/imgora/#imgora.BaseImage.path(with_image)","title":"<code>with_image</code>","text":"(<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>The image to use. If None, the default image is used.</p>"},{"location":"reference/imgora/#imgora.BaseImage.path(encode_image)","title":"<code>encode_image</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Whether to encode the image path.</p>"},{"location":"reference/imgora/#imgora.BaseImage.path(signer)","title":"<code>signer</code>","text":"(<code>Signer | None</code>, default:                   <code>None</code> )           \u2013            <p>The signer to use. If None the default is used.</p>"},{"location":"reference/imgora/#imgora.BaseImage.url","title":"url","text":"<pre><code>url(\n    with_image: str | None = None,\n    with_base: str | None = None,\n    signer: Signer | None = None,\n) -&gt; str\n</code></pre> <p>Generate the full URL.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The complete URL with all operations and filters applied.</p> </li> </ul>"},{"location":"reference/imgora/#imgora.BaseImage.url(with_image)","title":"<code>with_image</code>","text":"(<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>The image to use. If None, the default image is used.</p>"},{"location":"reference/imgora/#imgora.BaseImage.url(with_base)","title":"<code>with_base</code>","text":"(<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>The base URL to use. If None, the default base URL is used.</p>"},{"location":"reference/imgora/#imgora.BaseImage.url(signer)","title":"<code>signer</code>","text":"(<code>Signer | None</code>, default:                   <code>None</code> )           \u2013            <p>The signer to use. If None the default is used.</p>"},{"location":"reference/imgora/#imgora.BaseImage.sign_path","title":"sign_path","text":"<pre><code>sign_path(path: str, signer: Signer | None = None) -&gt; str\n</code></pre> <p>Sign a URL path using HMAC.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The signature.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>ValueError</code>             \u2013            <p>If no key is configured for signing.</p> </li> </ul>"},{"location":"reference/imgora/#imgora.BaseImage.sign_path(path)","title":"<code>path</code>","text":"(<code>str</code>)           \u2013            <p>The URL path to sign. The path is not encoded, this needs to be done previously.</p>"},{"location":"reference/imgora/#imgora.BaseImage.sign_path(signer)","title":"<code>signer</code>","text":"(<code>Signer | None</code>, default:                   <code>None</code> )           \u2013            <p>The signer to use. If None the default is used.</p>"},{"location":"reference/imgora/#imgora.BaseImage.encode_image_path","title":"encode_image_path","text":"<pre><code>encode_image_path(path: str) -&gt; str\n</code></pre> <p>Encode the image path with <code>urllib.parse.quote</code>.</p>"},{"location":"reference/imgora/#imgora.BaseImage.sign","title":"sign","text":"<pre><code>sign(\n    unsafe: bool = False, signer: Signer | None = None\n) -&gt; Self\n</code></pre> <p>Set the signer.</p> <p>Parameters:</p>"},{"location":"reference/imgora/#imgora.BaseImage.sign(unsafe)","title":"<code>unsafe</code>","text":"(<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>If True, skip URL signing even if a key is configured.</p>"},{"location":"reference/imgora/#imgora.BaseImage.sign(signer)","title":"<code>signer</code>","text":"(<code>Signer | None</code>, default:                   <code>None</code> )           \u2013            <p>The signer to use. If None the default is used.</p>"},{"location":"reference/imgora/#imgora.BaseImage.unsafe","title":"unsafe","text":"<pre><code>unsafe() -&gt; Self\n</code></pre> <p>Set the signer to unsafe.</p>"},{"location":"reference/imgora/#imgora.BaseImage.get_size","title":"get_size","text":"<pre><code>get_size(original: bool = False) -&gt; tuple[int, int]\n</code></pre> <p>Returns the image size.</p>"},{"location":"reference/imgora/#imgora.BaseImage.trim","title":"trim","text":"<pre><code>trim() -&gt; Self\n</code></pre> <p>Trim the image.</p>"},{"location":"reference/imgora/#imgora.BaseImage.crop","title":"crop","text":"<pre><code>crop(\n    left: int | float | None = None,\n    top: int | float | None = None,\n    right: int | float | None = None,\n    bottom: int | float | None = None,\n    width: int | float | None = None,\n    height: int | float | None = None,\n    halign: HALIGN | None = None,\n    valign: VALIGN | None = None,\n) -&gt; Self\n</code></pre> <p>Manually crop the image. Coordinates are in pixel or float values between 0 and 1 (percentage of image dimensions) The coordiantes start in the top/left corner and go down and right.</p> <p>Parameters:</p> <p>Examples</p> CodeCoordinate System <pre><code>img.crop(left=5, top=2, right=10, bottom=4)\nimg.crop(left=5, top=2, right=-4, bottom=-2)\nimg.crop(left=5, top=2, width=5, height=2)\nimg.crop(left=0.3, top=0.42, width=0.5, height=0.4)\n</code></pre> <pre><code>  0    5    10          x\n0 *=============*-------&gt;\n  #    .    .   #\n2 #....+~~~~~+  #\n  # . .|     |  #\n4 # . .+~~~~~+  #\n  *=============*\n  |\ny v\n</code></pre>"},{"location":"reference/imgora/#imgora.BaseImage.crop(left)","title":"<code>left</code>","text":"(<code>int | float | None</code>, default:                   <code>None</code> )           \u2013            <p>Left coordinate of the crop (pixel or relative).</p>"},{"location":"reference/imgora/#imgora.BaseImage.crop(top)","title":"<code>top</code>","text":"(<code>int | float | None</code>, default:                   <code>None</code> )           \u2013            <p>Top coordinate of the crop (pixel or relative).</p>"},{"location":"reference/imgora/#imgora.BaseImage.crop(right)","title":"<code>right</code>","text":"(<code>int | float | None</code>, default:                   <code>None</code> )           \u2013            <p>Right coordinate of the crop (pixel or relative), can be negative.</p>"},{"location":"reference/imgora/#imgora.BaseImage.crop(bottom)","title":"<code>bottom</code>","text":"(<code>int | float | None</code>, default:                   <code>None</code> )           \u2013            <p>Bottom coordinate of the crop (pixel or relative), can be negative.</p>"},{"location":"reference/imgora/#imgora.BaseImage.crop(width)","title":"<code>width</code>","text":"(<code>int | float | None</code>, default:                   <code>None</code> )           \u2013            <p>Width of the crop (pixel or relative).</p>"},{"location":"reference/imgora/#imgora.BaseImage.crop(height)","title":"<code>height</code>","text":"(<code>int | float | None</code>, default:                   <code>None</code> )           \u2013            <p>Height of the crop (pixel or relative).</p>"},{"location":"reference/imgora/#imgora.BaseImage.crop(halign)","title":"<code>halign</code>","text":"(<code>HALIGN | None</code>, default:                   <code>None</code> )           \u2013            <p>Horizontal alignment of the crop (left, center, right).</p>"},{"location":"reference/imgora/#imgora.BaseImage.crop(valign)","title":"<code>valign</code>","text":"(<code>VALIGN | None</code>, default:                   <code>None</code> )           \u2013            <p>Vertical alignment of the crop (top, middle, bottom).</p>"},{"location":"reference/imgora/#imgora.BaseImage.resize","title":"resize","text":"<pre><code>resize(\n    width: int,\n    height: int,\n    method: Literal[\"fit-in\", \"stretch\", \"smart\", \"focal\"]\n    | None = None,\n    upscale: bool = True,\n) -&gt; Self\n</code></pre> <p>Resize the image to the exact dimensions.</p> <p>Parameters:</p>"},{"location":"reference/imgora/#imgora.BaseImage.resize(width)","title":"<code>width</code>","text":"(<code>int</code>)           \u2013            <p>Target width in pixels.</p>"},{"location":"reference/imgora/#imgora.BaseImage.resize(height)","title":"<code>height</code>","text":"(<code>int</code>)           \u2013            <p>Target height in pixels.</p>"},{"location":"reference/imgora/#imgora.BaseImage.resize(method)","title":"<code>method</code>","text":"(<code>Literal['fit-in', 'stretch', 'smart', 'focal'] | None</code>, default:                   <code>None</code> )           \u2013            <p>Resizing method (fit-in, stretch, smart, focal),     automatically set to 'focal' if used before, otherwise 'fit-in'.</p>"},{"location":"reference/imgora/#imgora.BaseImage.resize(upscale)","title":"<code>upscale</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Whether to upscale the image.</p>"},{"location":"reference/imgora/#imgora.BaseImage.meta","title":"meta","text":"<pre><code>meta() -&gt; Self\n</code></pre> <p>Shows meta information of the image.</p>"},{"location":"reference/imgora/#imgora.BaseImage.background_color","title":"background_color","text":"<pre><code>background_color(color: str) -&gt; Self\n</code></pre> <p>The <code>background_color</code> filter sets the background layer to the specified color. This is specifically useful when converting transparent images (PNG) to JPEG.</p> <p>Parameters:</p>"},{"location":"reference/imgora/#imgora.BaseImage.background_color(color)","title":"<code>color</code>","text":"(<code>str</code>)           \u2013            <p>Background color in hex format without # or 'auto' (e.g., 'FFFFFF', 'aab').</p>"},{"location":"reference/imgora/#imgora.BaseImage.blur","title":"blur","text":"<pre><code>blur(radius: int, sigma: int | None = None) -&gt; Self\n</code></pre> <p>Apply gaussian blur to the image.</p> <p>Parameters:</p>"},{"location":"reference/imgora/#imgora.BaseImage.blur(radius)","title":"<code>radius</code>","text":"(<code>int</code>)           \u2013            <p>Radius of the blur effect (0-150). The bigger the radius, the more blur.</p>"},{"location":"reference/imgora/#imgora.BaseImage.blur(sigma)","title":"<code>sigma</code>","text":"(<code>int | None</code>, default:                   <code>None</code> )           \u2013            <p>Standard deviation of the gaussian kernel, defaults to <code>radius</code>.</p>"},{"location":"reference/imgora/#imgora.BaseImage.brightness","title":"brightness","text":"<pre><code>brightness(amount: int) -&gt; Self\n</code></pre> <p>Adjust brightness of the image.</p> <p>Parameters:</p>"},{"location":"reference/imgora/#imgora.BaseImage.brightness(amount)","title":"<code>amount</code>","text":"(<code>int</code>)           \u2013            <p><code>-100</code> to <code>100</code>. The amount (in %) to change the image brightness.     Positive numbers make the image brighter and negative numbers make the image darker.</p>"},{"location":"reference/imgora/#imgora.BaseImage.contrast","title":"contrast","text":"<pre><code>contrast(amount: int) -&gt; Self\n</code></pre> <p>Adjust contrast of the image.</p> <p>Parameters:</p>"},{"location":"reference/imgora/#imgora.BaseImage.contrast(amount)","title":"<code>amount</code>","text":"(<code>int</code>)           \u2013            <p><code>-100</code> to <code>100</code>. The amount (in %) to change the image contrast.      Positive numbers increase contrast and negative numbers decrease contrast.</p>"},{"location":"reference/imgora/#imgora.BaseImage.rgb","title":"rgb","text":"<pre><code>rgb(r: float = 0, g: float = 0, b: float = 0) -&gt; Self\n</code></pre> <p>Adjust the RGB channels of the image.</p> <p>Parameters:</p>"},{"location":"reference/imgora/#imgora.BaseImage.rgb(r)","title":"<code>r</code>","text":"(<code>float</code>, default:                   <code>0</code> )           \u2013            <p><code>-100</code> to <code>100</code>. Red channel adjustment.</p>"},{"location":"reference/imgora/#imgora.BaseImage.rgb(g)","title":"<code>g</code>","text":"(<code>float</code>, default:                   <code>0</code> )           \u2013            <p><code>-100</code> to <code>100</code>. Green channel adjustment.</p>"},{"location":"reference/imgora/#imgora.BaseImage.rgb(b)","title":"<code>b</code>","text":"(<code>float</code>, default:                   <code>0</code> )           \u2013            <p><code>-100</code> to <code>100</code>. Blue channel adjustment.</p>"},{"location":"reference/imgora/#imgora.BaseImage.focal","title":"focal","text":"<pre><code>focal(\n    left: int | float | None = None,\n    top: int | float | None = None,\n    right: int | float | None = None,\n    bottom: int | float | None = None,\n) -&gt; Self\n</code></pre> <p>Set the focal point of the image, which is used in later transforms (e.g. <code>crop</code>).</p> <p>Parameters:</p>"},{"location":"reference/imgora/#imgora.BaseImage.focal(left)","title":"<code>left</code>","text":"(<code>int | float | None</code>, default:                   <code>None</code> )           \u2013            <p>Left coordinate of the focal region.</p>"},{"location":"reference/imgora/#imgora.BaseImage.focal(top)","title":"<code>top</code>","text":"(<code>int | float | None</code>, default:                   <code>None</code> )           \u2013            <p>Top coordinate of the focal region.</p>"},{"location":"reference/imgora/#imgora.BaseImage.focal(right)","title":"<code>right</code>","text":"(<code>int | float | None</code>, default:                   <code>None</code> )           \u2013            <p>Right coordinate of the focal region.</p>"},{"location":"reference/imgora/#imgora.BaseImage.focal(bottom)","title":"<code>bottom</code>","text":"(<code>int | float | None</code>, default:                   <code>None</code> )           \u2013            <p>Bottom coordinate of the focal region.</p>"},{"location":"reference/imgora/#imgora.BaseImage.quality","title":"quality","text":"<pre><code>quality(amount: int) -&gt; Self\n</code></pre> <p>Set the image quality (JPEG only).</p> <p>Parameters:</p>"},{"location":"reference/imgora/#imgora.BaseImage.quality(amount)","title":"<code>amount</code>","text":"(<code>int</code>)           \u2013            <p>Quality percentage (1-100).</p>"},{"location":"reference/imgora/#imgora.BaseImage.round_corner","title":"round_corner","text":"<pre><code>round_corner(\n    rx: int, ry: int | None = None, color: str | None = None\n) -&gt; Self\n</code></pre> <p>Add rounded corners to the image.</p> <p>Parameters:</p>"},{"location":"reference/imgora/#imgora.BaseImage.round_corner(rx)","title":"<code>rx</code>","text":"(<code>int</code>)           \u2013            <p>X radius of the corners in pixels.</p>"},{"location":"reference/imgora/#imgora.BaseImage.round_corner(ry)","title":"<code>ry</code>","text":"(<code>int | None</code>, default:                   <code>None</code> )           \u2013            <p>Y radius of the corners in pixels (defaults to rx).</p>"},{"location":"reference/imgora/#imgora.BaseImage.round_corner(color)","title":"<code>color</code>","text":"(<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>Corner color in CSS format (default: \"none\").</p>"},{"location":"reference/imgora/#imgora.BaseImage.radius","title":"radius","text":"<pre><code>radius(\n    rx: int, ry: int | None = None, color: str | None = None\n) -&gt; Self\n</code></pre> <p>Add rounded corners to the image (alias for round_corner).</p> <p>Parameters:</p>"},{"location":"reference/imgora/#imgora.BaseImage.radius(rx)","title":"<code>rx</code>","text":"(<code>int</code>)           \u2013            <p>X radius of the corners in pixels.</p>"},{"location":"reference/imgora/#imgora.BaseImage.radius(ry)","title":"<code>ry</code>","text":"(<code>int | None</code>, default:                   <code>None</code> )           \u2013            <p>Y radius of the corners in pixels (defaults to rx).</p>"},{"location":"reference/imgora/#imgora.BaseImage.radius(color)","title":"<code>color</code>","text":"(<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>Corner color in CSS format (default: \"none\").</p>"},{"location":"reference/imgora/#imgora.Filter","title":"Filter  <code>dataclass</code>","text":"<pre><code>Filter(name: str, args: tuple[Any, ...] = tuple())\n</code></pre> <p>Represents an image processing filter.</p> <p>Attributes:</p> <ul> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>The name of the filter.</p> </li> <li> <code>args</code>               (<code>tuple[Any, ...]</code>)           \u2013            <p>Arguments for the filter, if empty the name is used</p> </li> </ul>"},{"location":"reference/imgora/#imgora.Filter-attributes","title":"Attributes","text":""},{"location":"reference/imgora/#imgora.Filter.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre>"},{"location":"reference/imgora/#imgora.Filter.args","title":"args  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>args: tuple[Any, ...] = field(default_factory=tuple)\n</code></pre>"},{"location":"reference/imgora/#imgora.Filter-functions","title":"Functions","text":""},{"location":"reference/imgora/#imgora.Operation","title":"Operation  <code>dataclass</code>","text":"<pre><code>Operation(name: str, arg: str | None = None)\n</code></pre> <p>Represents an image processing operation.</p> <p>Attributes:</p> <ul> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>The name of the operation.</p> </li> <li> <code>arg</code>               (<code>str | None</code>)           \u2013            <p>Arguments for the operation, if empty the name is used</p> </li> </ul>"},{"location":"reference/imgora/#imgora.Operation-attributes","title":"Attributes","text":""},{"location":"reference/imgora/#imgora.Operation.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre>"},{"location":"reference/imgora/#imgora.Operation.arg","title":"arg  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>arg: str | None = None\n</code></pre>"},{"location":"reference/imgora/#imgora.Operation-functions","title":"Functions","text":""},{"location":"reference/imgora/#imgora.Signer","title":"Signer","text":"<pre><code>Signer(\n    type: HashCode = \"sha1\",\n    truncate: int | None = None,\n    key: str | None = None,\n    unsafe: bool | None = None,\n)\n</code></pre> <p>Signer class for URL signing.</p> <p>Parameters:</p> <p>Attributes:</p> <ul> <li> <code>type</code>               (<code>HashCode</code>)           \u2013            <p>Hash algorithm for URL signing.</p> </li> <li> <code>truncate</code>               (<code>int | None</code>)           \u2013            <p>Number of characters to truncate the signature to, defaults to <code>None</code></p> </li> <li> <code>key</code>               (<code>str | None</code>)           \u2013            <p>Secret key for URL signing, if <code>unsafe</code> is set it returns <code>None</code>.</p> </li> <li> <code>unsafe</code>               (<code>bool | None</code>)           \u2013            <p>Whether to disable signing.</p> </li> </ul>"},{"location":"reference/imgora/#imgora.Signer(type)","title":"<code>type</code>","text":"(<code>HashCode</code>, default:                   <code>'sha1'</code> )           \u2013            <p>Hash algorithm for URL signing (sha1, sha256, sha512).</p>"},{"location":"reference/imgora/#imgora.Signer(truncate)","title":"<code>truncate</code>","text":"(<code>int | None</code>, default:                   <code>None</code> )           \u2013            <p>Number of characters to truncate the signature to, defaults to <code>None</code></p>"},{"location":"reference/imgora/#imgora.Signer(key)","title":"<code>key</code>","text":"(<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>The signing key/secret, needs to be the same as defined in the Imagor/Thumbor server.</p>"},{"location":"reference/imgora/#imgora.Signer(unsafe)","title":"<code>unsafe</code>","text":"(<code>bool | None</code>, default:                   <code>None</code> )           \u2013            <p>Whether to disable signing, if no key is set it defaults to unsafe, but with this option you can override it.</p>"},{"location":"reference/imgora/#imgora.Signer-attributes","title":"Attributes","text":""},{"location":"reference/imgora/#imgora.Signer.type","title":"type  <code>property</code>","text":"<pre><code>type: HashCode\n</code></pre> <p>Hash algorithm for URL signing.</p>"},{"location":"reference/imgora/#imgora.Signer.truncate","title":"truncate  <code>property</code>","text":"<pre><code>truncate: int | None\n</code></pre> <p>Number of characters to truncate the signature to, defaults to <code>None</code></p>"},{"location":"reference/imgora/#imgora.Signer.key","title":"key  <code>property</code>","text":"<pre><code>key: str | None\n</code></pre> <p>Secret key for URL signing, if <code>unsafe</code> is set it returns <code>None</code>.</p>"},{"location":"reference/imgora/#imgora.Signer.unsafe","title":"unsafe  <code>property</code>","text":"<pre><code>unsafe: bool | None\n</code></pre> <p>Whether to disable signing.</p>"},{"location":"reference/imgora/#imgora.Signer-functions","title":"Functions","text":""},{"location":"reference/imgora/#imgora.Imagor","title":"Imagor","text":"<pre><code>Imagor(\n    base_url: str = \"\",\n    image: str = \"\",\n    signer: Signer | None = None,\n)\n</code></pre> <p>Imagor image processor with Imagor-specific operations and filters.</p> <p>Initialize a new image processor.</p> <p>Parameters:</p> <p>Methods:</p> <ul> <li> <code>add_operation</code>             \u2013              <p>Add an operation to the image processing pipeline.</p> </li> <li> <code>add_filter</code>             \u2013              <p>Add a filter to the image processing pipeline.</p> </li> <li> <code>remove</code>             \u2013              <p>Remove an operation or filter from the image processing pipeline by name.</p> </li> <li> <code>remove_filters</code>             \u2013              <p>Remove all filters from the image processing pipeline.</p> </li> <li> <code>remove_operations</code>             \u2013              <p>Remove all operations from the image processing pipeline.</p> </li> <li> <code>get_filter</code>             \u2013              <p>Get a filter by name.</p> </li> <li> <code>get_operation</code>             \u2013              <p>Get an operation by name.</p> </li> <li> <code>with_image</code>             \u2013              <p>Set the source image.</p> </li> <li> <code>with_base</code>             \u2013              <p>Set the base URL of the Imagor/Thumbor server.</p> </li> <li> <code>path</code>             \u2013              <p>Generate the URL path with all operations and filters applied.</p> </li> <li> <code>url</code>             \u2013              <p>Generate the full URL.</p> </li> <li> <code>sign_path</code>             \u2013              <p>Sign a URL path using HMAC.</p> </li> <li> <code>encode_image_path</code>             \u2013              <p>Encode the image path with <code>urllib.parse.quote</code>.</p> </li> <li> <code>sign</code>             \u2013              <p>Set the signer.</p> </li> <li> <code>unsafe</code>             \u2013              <p>Set the signer to unsafe.</p> </li> <li> <code>get_size</code>             \u2013              <p>Returns the image size.</p> </li> <li> <code>trim</code>             \u2013              <p>Trim the image.</p> </li> <li> <code>crop</code>             \u2013              <p>Manually crop the image. Coordinates are in pixel or float values between 0 and 1 (percentage of image dimensions)</p> </li> <li> <code>resize</code>             \u2013              <p>Resize the image to the exact dimensions.</p> </li> <li> <code>meta</code>             \u2013              <p>Shows meta information of the image.</p> </li> <li> <code>background_color</code>             \u2013              <p>The <code>background_color</code> filter sets the background layer to the specified color.</p> </li> <li> <code>blur</code>             \u2013              <p>Apply gaussian blur to the image.</p> </li> <li> <code>brightness</code>             \u2013              <p>Adjust the image brightness.</p> </li> <li> <code>contrast</code>             \u2013              <p>Adjust the image contrast.</p> </li> <li> <code>rgb</code>             \u2013              <p>Adjust the RGB channels of the image.</p> </li> <li> <code>quality</code>             \u2013              <p>Set the quality of the output image.</p> </li> <li> <code>radius</code>             \u2013              <p>Add rounded corners to the image (alias for round_corner).</p> </li> <li> <code>grayscale</code>             \u2013              <p>Convert the image to grayscale.</p> </li> <li> <code>format</code>             \u2013              <p>Set the output format of the image.</p> </li> <li> <code>strip_exif</code>             \u2013              <p>Remove EXIF metadata from the image.</p> </li> <li> <code>strip_icc</code>             \u2013              <p>Remove ICC profile from the image.</p> </li> <li> <code>upscale</code>             \u2013              <p>Allow upscaling the image beyond its original dimensions.</p> </li> <li> <code>max_bytes</code>             \u2013              <p>Set the maximum file size in bytes for the output image.</p> </li> <li> <code>proportion</code>             \u2013              <p>Scale the image to the specified percentage of its original size.</p> </li> <li> <code>rotate</code>             \u2013              <p>Rotate the given image by the specified angle after processing.</p> </li> <li> <code>saturation</code>             \u2013              <p>Adjust the image saturation.</p> </li> <li> <code>focal</code>             \u2013              <p>Set the focal point of the image, which is used in later transforms (e.g. <code>crop</code>).</p> </li> <li> <code>page</code>             \u2013              <p>Select a specific page from a multi-page document.</p> </li> <li> <code>dpi</code>             \u2013              <p>Set the DPI for vector images like PDF or SVG.</p> </li> <li> <code>orient</code>             \u2013              <p>Rotate the image before resizing and cropping.</p> </li> <li> <code>fill</code>             \u2013              <p>Fill the missing area or transparent image with the specified color.</p> </li> <li> <code>hue</code>             \u2013              <p>Adjust the hue of the image.</p> </li> <li> <code>round_corner</code>             \u2013              <p>Add rounded corners to the image.</p> </li> <li> <code>watermark</code>             \u2013              <p>Add a watermark to the image.</p> </li> <li> <code>label</code>             \u2013              <p>Add a text label to the image.</p> </li> <li> <code>strip_metadata</code>             \u2013              <p>Remove all metadata from the image.</p> </li> <li> <code>max_frames</code>             \u2013              <p>Limit the number of frames in an animated image.</p> </li> <li> <code>sharpen</code>             \u2013              <p>Sharpen the image.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>signer</code>               (<code>Signer | None</code>)           \u2013            </li> <li> <code>op_order</code>               (<code>tuple[str, ...]</code>)           \u2013            <p>Returns the operation order</p> </li> </ul>"},{"location":"reference/imgora/#imgora.Imagor(base_url)","title":"<code>base_url</code>","text":"(<code>str</code>, default:                   <code>''</code> )           \u2013            <p>Base URL of the Imagor/Thumbor server.</p>"},{"location":"reference/imgora/#imgora.Imagor(image)","title":"<code>image</code>","text":"(<code>str</code>, default:                   <code>''</code> )           \u2013            <p>Path or URL of the source image.</p>"},{"location":"reference/imgora/#imgora.Imagor(signer)","title":"<code>signer</code>","text":"(<code>Signer | None</code>, default:                   <code>None</code> )           \u2013            <p>The signer to use. If None the default is used.</p>"},{"location":"reference/imgora/#imgora.Imagor-attributes","title":"Attributes","text":""},{"location":"reference/imgora/#imgora.Imagor.signer","title":"signer  <code>property</code>","text":"<pre><code>signer: Signer | None\n</code></pre>"},{"location":"reference/imgora/#imgora.Imagor.op_order","title":"op_order  <code>property</code> <code>writable</code>","text":"<pre><code>op_order: tuple[str, ...]\n</code></pre> <p>Returns the operation order</p>"},{"location":"reference/imgora/#imgora.Imagor-functions","title":"Functions","text":""},{"location":"reference/imgora/#imgora.Imagor.add_operation","title":"add_operation","text":"<pre><code>add_operation(\n    op: str | Operation,\n    arg: str | None = None,\n    unique: bool = True,\n) -&gt; None\n</code></pre> <p>Add an operation to the image processing pipeline.</p> <p>Parameters:</p>"},{"location":"reference/imgora/#imgora.Imagor.add_operation(op)","title":"<code>op</code>","text":"(<code>str | Operation</code>)           \u2013            <p>The name of the operation or an Operation object.</p>"},{"location":"reference/imgora/#imgora.Imagor.add_operation(arg)","title":"<code>arg</code>","text":"(<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>Optional argument for the operation.</p>"},{"location":"reference/imgora/#imgora.Imagor.add_operation(unique)","title":"<code>unique</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Whether to remove existing operations with the same name before adding the new one.</p>"},{"location":"reference/imgora/#imgora.Imagor.add_filter","title":"add_filter","text":"<pre><code>add_filter(\n    filter: str | Filter, *args: Any, unique: bool = True\n) -&gt; None\n</code></pre> <p>Add a filter to the image processing pipeline.</p> <p>Parameters:</p>"},{"location":"reference/imgora/#imgora.Imagor.add_filter(filter)","title":"<code>filter</code>","text":"(<code>str | Filter</code>)           \u2013            <p>The name of the filter or a Filter object.</p>"},{"location":"reference/imgora/#imgora.Imagor.add_filter(unique)","title":"<code>unique</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Whether to remove existing filters with the same name before adding the new one.</p>"},{"location":"reference/imgora/#imgora.Imagor.add_filter(*args)","title":"<code>*args</code>","text":"(<code>Any</code>, default:                   <code>()</code> )           \u2013            <p>Arguments for the filter.</p>"},{"location":"reference/imgora/#imgora.Imagor.remove","title":"remove","text":"<pre><code>remove(\n    name: str,\n    include: tuple[\n        Literal[\"operations\", \"filters\"], ...\n    ] = (\"operations\", \"filters\"),\n) -&gt; None\n</code></pre> <p>Remove an operation or filter from the image processing pipeline by name.</p> <p>For example:</p> <pre><code>image.remove(\"crop\")\nimage.remove(\"upscale\")\n</code></pre> <p>Parameters:</p>"},{"location":"reference/imgora/#imgora.Imagor.remove(name)","title":"<code>name</code>","text":"(<code>str</code>)           \u2013            <p>The name of the operation or filter to remove.</p>"},{"location":"reference/imgora/#imgora.Imagor.remove_filters","title":"remove_filters","text":"<pre><code>remove_filters() -&gt; None\n</code></pre> <p>Remove all filters from the image processing pipeline.</p>"},{"location":"reference/imgora/#imgora.Imagor.remove_operations","title":"remove_operations","text":"<pre><code>remove_operations() -&gt; None\n</code></pre> <p>Remove all operations from the image processing pipeline.</p>"},{"location":"reference/imgora/#imgora.Imagor.get_filter","title":"get_filter","text":"<pre><code>get_filter(name: str) -&gt; Filter | None\n</code></pre> <p>Get a filter by name.</p>"},{"location":"reference/imgora/#imgora.Imagor.get_operation","title":"get_operation","text":"<pre><code>get_operation(name: str) -&gt; Operation | None\n</code></pre> <p>Get an operation by name.</p>"},{"location":"reference/imgora/#imgora.Imagor.with_image","title":"with_image","text":"<pre><code>with_image(image: str) -&gt; Self\n</code></pre> <p>Set the source image.</p> <p>Parameters:</p>"},{"location":"reference/imgora/#imgora.Imagor.with_image(image)","title":"<code>image</code>","text":"(<code>str</code>)           \u2013            <p>Path or URL of the source image.</p>"},{"location":"reference/imgora/#imgora.Imagor.with_base","title":"with_base","text":"<pre><code>with_base(base_url: str) -&gt; Self\n</code></pre> <p>Set the base URL of the Imagor/Thumbor server.</p> <p>Parameters:</p>"},{"location":"reference/imgora/#imgora.Imagor.with_base(base_url)","title":"<code>base_url</code>","text":"(<code>str</code>)           \u2013            <p>Base URL of the server.</p>"},{"location":"reference/imgora/#imgora.Imagor.path","title":"path","text":"<pre><code>path(\n    with_image: str | None = None,\n    encode_image: bool = True,\n    signer: Signer | None = None,\n) -&gt; str\n</code></pre> <p>Generate the URL path with all operations and filters applied.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The generated URL path.</p> </li> </ul>"},{"location":"reference/imgora/#imgora.Imagor.path(with_image)","title":"<code>with_image</code>","text":"(<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>The image to use. If None, the default image is used.</p>"},{"location":"reference/imgora/#imgora.Imagor.path(encode_image)","title":"<code>encode_image</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Whether to encode the image path.</p>"},{"location":"reference/imgora/#imgora.Imagor.path(signer)","title":"<code>signer</code>","text":"(<code>Signer | None</code>, default:                   <code>None</code> )           \u2013            <p>The signer to use. If None the default is used.</p>"},{"location":"reference/imgora/#imgora.Imagor.url","title":"url","text":"<pre><code>url(\n    with_image: str | None = None,\n    with_base: str | None = None,\n    signer: Signer | None = None,\n) -&gt; str\n</code></pre> <p>Generate the full URL.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The complete URL with all operations and filters applied.</p> </li> </ul>"},{"location":"reference/imgora/#imgora.Imagor.url(with_image)","title":"<code>with_image</code>","text":"(<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>The image to use. If None, the default image is used.</p>"},{"location":"reference/imgora/#imgora.Imagor.url(with_base)","title":"<code>with_base</code>","text":"(<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>The base URL to use. If None, the default base URL is used.</p>"},{"location":"reference/imgora/#imgora.Imagor.url(signer)","title":"<code>signer</code>","text":"(<code>Signer | None</code>, default:                   <code>None</code> )           \u2013            <p>The signer to use. If None the default is used.</p>"},{"location":"reference/imgora/#imgora.Imagor.sign_path","title":"sign_path","text":"<pre><code>sign_path(path: str, signer: Signer | None = None) -&gt; str\n</code></pre> <p>Sign a URL path using HMAC.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The signature.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>ValueError</code>             \u2013            <p>If no key is configured for signing.</p> </li> </ul>"},{"location":"reference/imgora/#imgora.Imagor.sign_path(path)","title":"<code>path</code>","text":"(<code>str</code>)           \u2013            <p>The URL path to sign. The path is not encoded, this needs to be done previously.</p>"},{"location":"reference/imgora/#imgora.Imagor.sign_path(signer)","title":"<code>signer</code>","text":"(<code>Signer | None</code>, default:                   <code>None</code> )           \u2013            <p>The signer to use. If None the default is used.</p>"},{"location":"reference/imgora/#imgora.Imagor.encode_image_path","title":"encode_image_path","text":"<pre><code>encode_image_path(path: str) -&gt; str\n</code></pre> <p>Encode the image path with <code>urllib.parse.quote</code>.</p>"},{"location":"reference/imgora/#imgora.Imagor.sign","title":"sign","text":"<pre><code>sign(\n    unsafe: bool = False, signer: Signer | None = None\n) -&gt; Self\n</code></pre> <p>Set the signer.</p> <p>Parameters:</p>"},{"location":"reference/imgora/#imgora.Imagor.sign(unsafe)","title":"<code>unsafe</code>","text":"(<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>If True, skip URL signing even if a key is configured.</p>"},{"location":"reference/imgora/#imgora.Imagor.sign(signer)","title":"<code>signer</code>","text":"(<code>Signer | None</code>, default:                   <code>None</code> )           \u2013            <p>The signer to use. If None the default is used.</p>"},{"location":"reference/imgora/#imgora.Imagor.unsafe","title":"unsafe","text":"<pre><code>unsafe() -&gt; Self\n</code></pre> <p>Set the signer to unsafe.</p>"},{"location":"reference/imgora/#imgora.Imagor.get_size","title":"get_size","text":"<pre><code>get_size(original: bool = False) -&gt; tuple[int, int]\n</code></pre> <p>Returns the image size.</p>"},{"location":"reference/imgora/#imgora.Imagor.trim","title":"trim","text":"<pre><code>trim() -&gt; Self\n</code></pre> <p>Trim the image.</p>"},{"location":"reference/imgora/#imgora.Imagor.crop","title":"crop","text":"<pre><code>crop(\n    left: int | float | None = None,\n    top: int | float | None = None,\n    right: int | float | None = None,\n    bottom: int | float | None = None,\n    width: int | float | None = None,\n    height: int | float | None = None,\n    halign: HALIGN | None = None,\n    valign: VALIGN | None = None,\n) -&gt; Self\n</code></pre> <p>Manually crop the image. Coordinates are in pixel or float values between 0 and 1 (percentage of image dimensions) The coordiantes start in the top/left corner and go down and right.</p> <p>Parameters:</p> <p>Examples</p> CodeCoordinate System <pre><code>img.crop(left=5, top=2, right=10, bottom=4)\nimg.crop(left=5, top=2, right=-4, bottom=-2)\nimg.crop(left=5, top=2, width=5, height=2)\nimg.crop(left=0.3, top=0.42, width=0.5, height=0.4)\n</code></pre> <pre><code>  0    5    10          x\n0 *=============*-------&gt;\n  #    .    .   #\n2 #....+~~~~~+  #\n  # . .|     |  #\n4 # . .+~~~~~+  #\n  *=============*\n  |\ny v\n</code></pre>"},{"location":"reference/imgora/#imgora.Imagor.crop(left)","title":"<code>left</code>","text":"(<code>int | float | None</code>, default:                   <code>None</code> )           \u2013            <p>Left coordinate of the crop (pixel or relative).</p>"},{"location":"reference/imgora/#imgora.Imagor.crop(top)","title":"<code>top</code>","text":"(<code>int | float | None</code>, default:                   <code>None</code> )           \u2013            <p>Top coordinate of the crop (pixel or relative).</p>"},{"location":"reference/imgora/#imgora.Imagor.crop(right)","title":"<code>right</code>","text":"(<code>int | float | None</code>, default:                   <code>None</code> )           \u2013            <p>Right coordinate of the crop (pixel or relative), can be negative.</p>"},{"location":"reference/imgora/#imgora.Imagor.crop(bottom)","title":"<code>bottom</code>","text":"(<code>int | float | None</code>, default:                   <code>None</code> )           \u2013            <p>Bottom coordinate of the crop (pixel or relative), can be negative.</p>"},{"location":"reference/imgora/#imgora.Imagor.crop(width)","title":"<code>width</code>","text":"(<code>int | float | None</code>, default:                   <code>None</code> )           \u2013            <p>Width of the crop (pixel or relative).</p>"},{"location":"reference/imgora/#imgora.Imagor.crop(height)","title":"<code>height</code>","text":"(<code>int | float | None</code>, default:                   <code>None</code> )           \u2013            <p>Height of the crop (pixel or relative).</p>"},{"location":"reference/imgora/#imgora.Imagor.crop(halign)","title":"<code>halign</code>","text":"(<code>HALIGN | None</code>, default:                   <code>None</code> )           \u2013            <p>Horizontal alignment of the crop (left, center, right).</p>"},{"location":"reference/imgora/#imgora.Imagor.crop(valign)","title":"<code>valign</code>","text":"(<code>VALIGN | None</code>, default:                   <code>None</code> )           \u2013            <p>Vertical alignment of the crop (top, middle, bottom).</p>"},{"location":"reference/imgora/#imgora.Imagor.resize","title":"resize","text":"<pre><code>resize(\n    width: int,\n    height: int,\n    method: Literal[\"fit-in\", \"stretch\", \"smart\", \"focal\"]\n    | None = None,\n    upscale: bool = True,\n) -&gt; Self\n</code></pre> <p>Resize the image to the exact dimensions.</p> <p>Parameters:</p>"},{"location":"reference/imgora/#imgora.Imagor.resize(width)","title":"<code>width</code>","text":"(<code>int</code>)           \u2013            <p>Target width in pixels.</p>"},{"location":"reference/imgora/#imgora.Imagor.resize(height)","title":"<code>height</code>","text":"(<code>int</code>)           \u2013            <p>Target height in pixels.</p>"},{"location":"reference/imgora/#imgora.Imagor.resize(method)","title":"<code>method</code>","text":"(<code>Literal['fit-in', 'stretch', 'smart', 'focal'] | None</code>, default:                   <code>None</code> )           \u2013            <p>Resizing method (fit-in, stretch, smart, focal),     automatically set to 'focal' if used before, otherwise 'fit-in'.</p>"},{"location":"reference/imgora/#imgora.Imagor.resize(upscale)","title":"<code>upscale</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Whether to upscale the image.</p>"},{"location":"reference/imgora/#imgora.Imagor.meta","title":"meta","text":"<pre><code>meta() -&gt; Self\n</code></pre> <p>Shows meta information of the image.</p>"},{"location":"reference/imgora/#imgora.Imagor.background_color","title":"background_color","text":"<pre><code>background_color(color: str) -&gt; Self\n</code></pre> <p>The <code>background_color</code> filter sets the background layer to the specified color. This is specifically useful when converting transparent images (PNG) to JPEG.</p> <p>Parameters:</p>"},{"location":"reference/imgora/#imgora.Imagor.background_color(color)","title":"<code>color</code>","text":"(<code>str</code>)           \u2013            <p>Background color in hex format without # or 'auto' (e.g., 'FFFFFF', 'aab').</p>"},{"location":"reference/imgora/#imgora.Imagor.blur","title":"blur","text":"<pre><code>blur(radius: int, sigma: int | None = None) -&gt; Self\n</code></pre> <p>Apply gaussian blur to the image.</p> <p>Parameters:</p>"},{"location":"reference/imgora/#imgora.Imagor.blur(radius)","title":"<code>radius</code>","text":"(<code>int</code>)           \u2013            <p>Radius of the blur effect (0-150). The bigger the radius, the more blur.</p>"},{"location":"reference/imgora/#imgora.Imagor.blur(sigma)","title":"<code>sigma</code>","text":"(<code>int | None</code>, default:                   <code>None</code> )           \u2013            <p>Standard deviation of the gaussian kernel, defaults to <code>radius</code>.</p>"},{"location":"reference/imgora/#imgora.Imagor.brightness","title":"brightness","text":"<pre><code>brightness(amount: float) -&gt; Self\n</code></pre> <p>Adjust the image brightness.</p> <p>Parameters:</p>"},{"location":"reference/imgora/#imgora.Imagor.brightness(amount)","title":"<code>amount</code>","text":"(<code>float</code>)           \u2013            <p>Adjustment amount (-100 to 100).</p>"},{"location":"reference/imgora/#imgora.Imagor.contrast","title":"contrast","text":"<pre><code>contrast(amount: float) -&gt; Self\n</code></pre> <p>Adjust the image contrast.</p> <p>Parameters:</p>"},{"location":"reference/imgora/#imgora.Imagor.contrast(amount)","title":"<code>amount</code>","text":"(<code>float</code>)           \u2013            <p>Adjustment amount (-100 to 100).</p>"},{"location":"reference/imgora/#imgora.Imagor.rgb","title":"rgb","text":"<pre><code>rgb(r: float = 0, g: float = 0, b: float = 0) -&gt; Self\n</code></pre> <p>Adjust the RGB channels of the image.</p> <p>Parameters:</p>"},{"location":"reference/imgora/#imgora.Imagor.rgb(r)","title":"<code>r</code>","text":"(<code>float</code>, default:                   <code>0</code> )           \u2013            <p><code>-100</code> to <code>100</code>. Red channel adjustment.</p>"},{"location":"reference/imgora/#imgora.Imagor.rgb(g)","title":"<code>g</code>","text":"(<code>float</code>, default:                   <code>0</code> )           \u2013            <p><code>-100</code> to <code>100</code>. Green channel adjustment.</p>"},{"location":"reference/imgora/#imgora.Imagor.rgb(b)","title":"<code>b</code>","text":"(<code>float</code>, default:                   <code>0</code> )           \u2013            <p><code>-100</code> to <code>100</code>. Blue channel adjustment.</p>"},{"location":"reference/imgora/#imgora.Imagor.quality","title":"quality","text":"<pre><code>quality(amount: int) -&gt; Self\n</code></pre> <p>Set the quality of the output image.</p> <p>Parameters:</p>"},{"location":"reference/imgora/#imgora.Imagor.quality(amount)","title":"<code>amount</code>","text":"(<code>int</code>)           \u2013            <p>Quality level from 0 to 100.</p>"},{"location":"reference/imgora/#imgora.Imagor.radius","title":"radius","text":"<pre><code>radius(\n    rx: int, ry: int | None = None, color: str | None = None\n) -&gt; Self\n</code></pre> <p>Add rounded corners to the image (alias for round_corner).</p> <p>Parameters:</p>"},{"location":"reference/imgora/#imgora.Imagor.radius(rx)","title":"<code>rx</code>","text":"(<code>int</code>)           \u2013            <p>X radius of the corners in pixels.</p>"},{"location":"reference/imgora/#imgora.Imagor.radius(ry)","title":"<code>ry</code>","text":"(<code>int | None</code>, default:                   <code>None</code> )           \u2013            <p>Y radius of the corners in pixels (defaults to rx).</p>"},{"location":"reference/imgora/#imgora.Imagor.radius(color)","title":"<code>color</code>","text":"(<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>Corner color in CSS format (default: \"none\").</p>"},{"location":"reference/imgora/#imgora.Imagor.grayscale","title":"grayscale","text":"<pre><code>grayscale() -&gt; Self\n</code></pre> <p>Convert the image to grayscale.</p>"},{"location":"reference/imgora/#imgora.Imagor.format","title":"format","text":"<pre><code>format(fmt: ImageFormats) -&gt; Self\n</code></pre> <p>Set the output format of the image.</p> <p>Parameters:</p>"},{"location":"reference/imgora/#imgora.Imagor.format(fmt)","title":"<code>fmt</code>","text":"(<code>ImageFormats</code>)           \u2013            <p>Output format (e.g., 'jpeg', 'png', 'webp', 'gif').</p>"},{"location":"reference/imgora/#imgora.Imagor.strip_exif","title":"strip_exif","text":"<pre><code>strip_exif() -&gt; Self\n</code></pre> <p>Remove EXIF metadata from the image.</p>"},{"location":"reference/imgora/#imgora.Imagor.strip_icc","title":"strip_icc","text":"<pre><code>strip_icc() -&gt; Self\n</code></pre> <p>Remove ICC profile from the image.</p>"},{"location":"reference/imgora/#imgora.Imagor.upscale","title":"upscale","text":"<pre><code>upscale(upscale: bool = True) -&gt; Self\n</code></pre> <p>Allow upscaling the image beyond its original dimensions.</p> <p>This only makes sense with <code>fit-in</code>.</p>"},{"location":"reference/imgora/#imgora.Imagor.max_bytes","title":"max_bytes","text":"<pre><code>max_bytes(amount: int) -&gt; Self\n</code></pre> <p>Set the maximum file size in bytes for the output image.</p> <p>Parameters:</p>"},{"location":"reference/imgora/#imgora.Imagor.max_bytes(amount)","title":"<code>amount</code>","text":"(<code>int</code>)           \u2013            <p>Maximum file size in bytes.</p>"},{"location":"reference/imgora/#imgora.Imagor.proportion","title":"proportion","text":"<pre><code>proportion(percentage: float) -&gt; Self\n</code></pre> <p>Scale the image to the specified percentage of its original size.</p> <p>Parameters:</p>"},{"location":"reference/imgora/#imgora.Imagor.proportion(percentage)","title":"<code>percentage</code>","text":"(<code>float</code>)           \u2013            <p>Scale percentage (0-100).</p>"},{"location":"reference/imgora/#imgora.Imagor.rotate","title":"rotate","text":"<pre><code>rotate(angle: int) -&gt; Self\n</code></pre> <p>Rotate the given image by the specified angle after processing.</p> <p>This is different from the 'orient' filter which rotates the image before processing.</p> <p>Parameters:</p>"},{"location":"reference/imgora/#imgora.Imagor.rotate(angle)","title":"<code>angle</code>","text":"(<code>int</code>)           \u2013            <p><code>0</code>, <code>90</code>, <code>180</code>, <code>270</code>. Rotation angle.</p>"},{"location":"reference/imgora/#imgora.Imagor.saturation","title":"saturation","text":"<pre><code>saturation(amount: float) -&gt; Self\n</code></pre> <p>Adjust the image saturation.</p> <p>Parameters:</p>"},{"location":"reference/imgora/#imgora.Imagor.saturation(amount)","title":"<code>amount</code>","text":"(<code>float</code>)           \u2013            <p>Adjustment amount (-100 to 100).</p>"},{"location":"reference/imgora/#imgora.Imagor.focal","title":"focal","text":"<pre><code>focal(\n    left: int | float | None = None,\n    top: int | float | None = None,\n    right: int | float | None = None,\n    bottom: int | float | None = None,\n) -&gt; Self\n</code></pre> <p>Set the focal point of the image, which is used in later transforms (e.g. <code>crop</code>).</p> <p>The coordinates are either in pixel of float values between 0 and 1 (percentage of image dimensions)</p> <p>Coordinated by a region of left-top point AxB and right-bottom point CxD, or a point X,Y.</p> <p>Parameters:</p>"},{"location":"reference/imgora/#imgora.Imagor.focal(left)","title":"<code>left</code>","text":"(<code>int | float | None</code>, default:                   <code>None</code> )           \u2013            <p>Left or x coordinate of the focal region/point, either in pixel or relative (float from 0 to 1).</p>"},{"location":"reference/imgora/#imgora.Imagor.focal(top)","title":"<code>top</code>","text":"(<code>int | float | None</code>, default:                   <code>None</code> )           \u2013            <p>Top or y coordinate of the focal region/point, either in pixel or relative (float from 0 to 1).</p>"},{"location":"reference/imgora/#imgora.Imagor.focal(right)","title":"<code>right</code>","text":"(<code>int | float | None</code>, default:                   <code>None</code> )           \u2013            <p>Right coordinate of the focal region, either in pixel or relative (float from 0 to 1).</p>"},{"location":"reference/imgora/#imgora.Imagor.focal(bottom)","title":"<code>bottom</code>","text":"(<code>int | float | None</code>, default:                   <code>None</code> )           \u2013            <p>Bottom coordinate of the focal region, either in pixel or relative (float from 0 to 1).</p>"},{"location":"reference/imgora/#imgora.Imagor.page","title":"page","text":"<pre><code>page(num: int) -&gt; Self\n</code></pre> <p>Select a specific page from a multi-page document.</p> <p>Parameters:</p>"},{"location":"reference/imgora/#imgora.Imagor.page(num)","title":"<code>num</code>","text":"(<code>int</code>)           \u2013            <p>Page number (1-based index).</p>"},{"location":"reference/imgora/#imgora.Imagor.dpi","title":"dpi","text":"<pre><code>dpi(dpi: int) -&gt; Self\n</code></pre> <p>Set the DPI for vector images like PDF or SVG.</p> <p>Parameters:</p>"},{"location":"reference/imgora/#imgora.Imagor.dpi(dpi)","title":"<code>dpi</code>","text":"(<code>int</code>)           \u2013            <p>Dots per inch.</p>"},{"location":"reference/imgora/#imgora.Imagor.orient","title":"orient","text":"<pre><code>orient(angle: int) -&gt; Self\n</code></pre> <p>Rotate the image before resizing and cropping.</p> <p>This is different from the 'rotate' filter which rotates the image after processing.</p> <p>Parameters:</p>"},{"location":"reference/imgora/#imgora.Imagor.orient(angle)","title":"<code>angle</code>","text":"(<code>int</code>)           \u2013            <p><code>0</code>, <code>90</code>, <code>180</code>, <code>270</code>. Rotation angle.</p>"},{"location":"reference/imgora/#imgora.Imagor.fill","title":"fill","text":"<pre><code>fill(\n    color: str\n    | Literal[\"blur\", \"auto\", \"none\"]\n    | None = None,\n) -&gt; Self\n</code></pre> <p>Fill the missing area or transparent image with the specified color.</p> <p>Parameters:</p>"},{"location":"reference/imgora/#imgora.Imagor.fill(color)","title":"<code>color</code>","text":"(<code>str | Literal['blur', 'auto', 'none'] | None</code>, default:                   <code>None</code> )           \u2013            <p>Color in hex format or 'blur', 'auto', or 'none' (transparent). Default is transparent.</p>"},{"location":"reference/imgora/#imgora.Imagor.hue","title":"hue","text":"<pre><code>hue(angle: int) -&gt; Self\n</code></pre> <p>Adjust the hue of the image.</p> <p>Parameters:</p>"},{"location":"reference/imgora/#imgora.Imagor.hue(angle)","title":"<code>angle</code>","text":"(<code>int</code>)           \u2013            <p><code>0</code> to <code>359</code>. Hue rotation angle in degrees.</p>"},{"location":"reference/imgora/#imgora.Imagor.round_corner","title":"round_corner","text":"<pre><code>round_corner(\n    rx: int, ry: int | None = None, color: str | None = None\n) -&gt; Self\n</code></pre> <p>Add rounded corners to the image.</p> <p>Parameters:</p>"},{"location":"reference/imgora/#imgora.Imagor.round_corner(rx)","title":"<code>rx</code>","text":"(<code>int</code>)           \u2013            <p>Horizontal radius of the corners.</p>"},{"location":"reference/imgora/#imgora.Imagor.round_corner(ry)","title":"<code>ry</code>","text":"(<code>int | None</code>, default:                   <code>None</code> )           \u2013            <p>Vertical radius of the corners (defaults to rx if not specified).</p>"},{"location":"reference/imgora/#imgora.Imagor.round_corner(color)","title":"<code>color</code>","text":"(<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>Corner color in hex format (default: '000000').</p>"},{"location":"reference/imgora/#imgora.Imagor.watermark","title":"watermark","text":"<pre><code>watermark(\n    image: str,\n    x: int | str = \"center\",\n    y: int | str = \"middle\",\n    alpha: int = 0,\n    w_ratio: Optional[float] = None,\n    h_ratio: Optional[float] = None,\n) -&gt; Self\n</code></pre> <p>Add a watermark to the image.</p> <p>Parameters:</p>"},{"location":"reference/imgora/#imgora.Imagor.watermark(image)","title":"<code>image</code>","text":"(<code>str</code>)           \u2013            <p>Watermark image URI.</p>"},{"location":"reference/imgora/#imgora.Imagor.watermark(x)","title":"<code>x</code>","text":"(<code>int | str</code>, default:                   <code>'center'</code> )           \u2013            <p>Horizontal position (e.g., <code>left</code>, <code>center</code>, <code>right</code>, <code>repeat</code>, or pixel value from left. Number with <code>p</code> suffix for percentage (e.g. <code>20p</code>)).</p>"},{"location":"reference/imgora/#imgora.Imagor.watermark(y)","title":"<code>y</code>","text":"(<code>int | str</code>, default:                   <code>'middle'</code> )           \u2013            <p>Vertical position (e.g., <code>top</code>, <code>middle</code>, <code>bottom</code>, <code>repeat</code>, or pixel value from top. Number with <code>p</code> suffix for percentage).</p>"},{"location":"reference/imgora/#imgora.Imagor.watermark(alpha)","title":"<code>alpha</code>","text":"(<code>int</code>, default:                   <code>0</code> )           \u2013            <p><code>0</code> to <code>100</code>. Watermark transparency.</p>"},{"location":"reference/imgora/#imgora.Imagor.watermark(w_ratio)","title":"<code>w_ratio</code>","text":"(<code>Optional[float]</code>, default:                   <code>None</code> )           \u2013            <p><code>0</code> to <code>100</code>. Width ratio of the watermark relative to the image.</p>"},{"location":"reference/imgora/#imgora.Imagor.watermark(h_ratio)","title":"<code>h_ratio</code>","text":"(<code>Optional[float]</code>, default:                   <code>None</code> )           \u2013            <p><code>0</code> to <code>100</code>. Height ratio of the watermark relative to the image.</p>"},{"location":"reference/imgora/#imgora.Imagor.label","title":"label","text":"<pre><code>label(\n    text: str,\n    x: int | str,\n    y: int | str,\n    size: int,\n    color: str,\n    alpha: Optional[float] = None,\n    font: Optional[str] = None,\n) -&gt; Self\n</code></pre> <p>Add a text label to the image.</p> <p>Parameters:</p>"},{"location":"reference/imgora/#imgora.Imagor.label(text)","title":"<code>text</code>","text":"(<code>str</code>)           \u2013            <p>Text to display (URL-encoded if needed).</p>"},{"location":"reference/imgora/#imgora.Imagor.label(x)","title":"<code>x</code>","text":"(<code>int | str</code>)           \u2013            <p>X position (can be number, percentage like <code>20p</code>, or <code>left</code>, <code>center</code>, <code>right</code>).</p>"},{"location":"reference/imgora/#imgora.Imagor.label(y)","title":"<code>y</code>","text":"(<code>int | str</code>)           \u2013            <p>Y position (can be number, percentage like <code>20p</code>, or <code>top</code>, <code>middle</code>, <code>bottom</code>).</p>"},{"location":"reference/imgora/#imgora.Imagor.label(size)","title":"<code>size</code>","text":"(<code>int</code>)           \u2013            <p>Font size in points.</p>"},{"location":"reference/imgora/#imgora.Imagor.label(color)","title":"<code>color</code>","text":"(<code>str</code>)           \u2013            <p>Text color in hex format (without #).</p>"},{"location":"reference/imgora/#imgora.Imagor.label(alpha)","title":"<code>alpha</code>","text":"(<code>Optional[float]</code>, default:                   <code>None</code> )           \u2013            <p>Text transparency (0.0 to 1.0).</p>"},{"location":"reference/imgora/#imgora.Imagor.label(font)","title":"<code>font</code>","text":"(<code>Optional[str]</code>, default:                   <code>None</code> )           \u2013            <p>Font family to use.</p>"},{"location":"reference/imgora/#imgora.Imagor.strip_metadata","title":"strip_metadata","text":"<pre><code>strip_metadata() -&gt; Self\n</code></pre> <p>Remove all metadata from the image.</p>"},{"location":"reference/imgora/#imgora.Imagor.max_frames","title":"max_frames","text":"<pre><code>max_frames(n: int) -&gt; Self\n</code></pre> <p>Limit the number of frames in an animated image.</p> <p>Parameters:</p>"},{"location":"reference/imgora/#imgora.Imagor.max_frames(n)","title":"<code>n</code>","text":"(<code>int</code>)           \u2013            <p>Maximum number of frames to keep.</p>"},{"location":"reference/imgora/#imgora.Imagor.sharpen","title":"sharpen","text":"<pre><code>sharpen(sigma: float, amount: float = 1.0) -&gt; Self\n</code></pre> <p>Sharpen the image.</p> <p>Parameters:</p>"},{"location":"reference/imgora/#imgora.Imagor.sharpen(sigma)","title":"<code>sigma</code>","text":"(<code>float</code>)           \u2013            <p>Standard deviation of the gaussian kernel.</p>"},{"location":"reference/imgora/#imgora.Imagor.sharpen(amount)","title":"<code>amount</code>","text":"(<code>float</code>, default:                   <code>1.0</code> )           \u2013            <p>Strength of the sharpening effect.</p>"},{"location":"reference/imgora/#imgora.Thumbor","title":"Thumbor","text":"<pre><code>Thumbor(\n    base_url: str = \"\",\n    image: str = \"\",\n    signer: Signer | None = None,\n)\n</code></pre> <p>Thumbor image processor with Thumbor-specific operations and filters.</p> <p>Filter documentation: https://thumbor.readthedocs.io/en/latest/filters.html</p> <p>Initialize a new image processor.</p> <p>Parameters:</p> <p>Methods:</p> <ul> <li> <code>add_operation</code>             \u2013              <p>Add an operation to the image processing pipeline.</p> </li> <li> <code>add_filter</code>             \u2013              <p>Add a filter to the image processing pipeline.</p> </li> <li> <code>remove</code>             \u2013              <p>Remove an operation or filter from the image processing pipeline by name.</p> </li> <li> <code>remove_filters</code>             \u2013              <p>Remove all filters from the image processing pipeline.</p> </li> <li> <code>remove_operations</code>             \u2013              <p>Remove all operations from the image processing pipeline.</p> </li> <li> <code>get_filter</code>             \u2013              <p>Get a filter by name.</p> </li> <li> <code>get_operation</code>             \u2013              <p>Get an operation by name.</p> </li> <li> <code>with_image</code>             \u2013              <p>Set the source image.</p> </li> <li> <code>with_base</code>             \u2013              <p>Set the base URL of the Imagor/Thumbor server.</p> </li> <li> <code>path</code>             \u2013              <p>Generate the URL path with all operations and filters applied.</p> </li> <li> <code>url</code>             \u2013              <p>Generate the full URL.</p> </li> <li> <code>sign_path</code>             \u2013              <p>Sign a URL path using HMAC.</p> </li> <li> <code>encode_image_path</code>             \u2013              <p>Encode the image path with <code>urllib.parse.quote</code>.</p> </li> <li> <code>sign</code>             \u2013              <p>Set the signer.</p> </li> <li> <code>unsafe</code>             \u2013              <p>Set the signer to unsafe.</p> </li> <li> <code>trim</code>             \u2013              <p>Trim the image.</p> </li> <li> <code>crop</code>             \u2013              <p>Manually crop the image. Coordinates are in pixel or float values between 0 and 1 (percentage of image dimensions)</p> </li> <li> <code>meta</code>             \u2013              <p>Shows meta information of the image.</p> </li> <li> <code>background_color</code>             \u2013              <p>The <code>background_color</code> filter sets the background layer to the specified color.</p> </li> <li> <code>blur</code>             \u2013              <p>Apply gaussian blur to the image.</p> </li> <li> <code>brightness</code>             \u2013              <p>Adjust the image brightness.</p> </li> <li> <code>contrast</code>             \u2013              <p>Adjust the image contrast.</p> </li> <li> <code>rgb</code>             \u2013              <p>Adjust the RGB channels of the image.</p> </li> <li> <code>radius</code>             \u2013              <p>Add rounded corners to the image (alias for round_corner).</p> </li> <li> <code>grayscale</code>             \u2013              <p>Convert the image to grayscale.</p> </li> <li> <code>strip_exif</code>             \u2013              <p>Remove EXIF metadata from the image.</p> </li> <li> <code>strip_icc</code>             \u2013              <p>Remove ICC profile from the image.</p> </li> <li> <code>max_bytes</code>             \u2013              <p>Set the maximum file size in bytes for the output image.</p> </li> <li> <code>proportion</code>             \u2013              <p>Scale the image to the specified percentage of its original size.</p> </li> <li> <code>rotate</code>             \u2013              <p>Rotate the given image by the specified angle after processing.</p> </li> <li> <code>get_size</code>             \u2013              <p>Returns the image size.</p> </li> <li> <code>resize</code>             \u2013              <p>Resize the image to the exact dimensions.</p> </li> <li> <code>auto_jpg</code>             \u2013              <p>Automatically convert to JPEG (overwrite <code>AUTO_PNG_TO_JPG</code> variable).</p> </li> <li> <code>convolution</code>             \u2013              <p>This filter runs a convolution matrix (or kernel) on the image.</p> </li> <li> <code>cover</code>             \u2013              <p>This filter is used in GIFs to extract their first frame as the image to be used as cover.</p> </li> <li> <code>equalize</code>             \u2013              <p>This filter equalizes the color distribution in the image.</p> </li> <li> <code>extract_focal</code>             \u2013              <p>Extract the focal points from the image.</p> </li> <li> <code>fill</code>             \u2013              <p>This filter returns an image sized exactly as requested independently of its ratio.</p> </li> <li> <code>focal</code>             \u2013              <p>Set the focal point of the image, which is used in later transforms (e.g. <code>crop</code>).</p> </li> <li> <code>format</code>             \u2013              <p>Convert the image to the specified format.</p> </li> <li> <code>noise</code>             \u2013              <p>Add noise to the image.</p> </li> <li> <code>quality</code>             \u2013              <p>Set the quality of the output image.</p> </li> <li> <code>red_eye</code>             \u2013              <p>Automatically detect and correct red-eye in photos.</p> </li> <li> <code>round_corner</code>             \u2013              <p>Add rounded corners to the image.</p> </li> <li> <code>saturation</code>             \u2013              <p>Adjust the image saturation.</p> </li> <li> <code>sharpen</code>             \u2013              <p>Sharpen the image.</p> </li> <li> <code>stretch</code>             \u2013              <p>This filter stretches the image until it fits the required width and height, instead of cropping the image.</p> </li> <li> <code>strip_metadata</code>             \u2013              <p>Remove all metadata from the image.</p> </li> <li> <code>upscale</code>             \u2013              <p>Enable upscaling of the image beyond its original dimensions.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>signer</code>               (<code>Signer | None</code>)           \u2013            </li> <li> <code>op_order</code>               (<code>tuple[str, ...]</code>)           \u2013            <p>Returns the operation order</p> </li> </ul>"},{"location":"reference/imgora/#imgora.Thumbor(base_url)","title":"<code>base_url</code>","text":"(<code>str</code>, default:                   <code>''</code> )           \u2013            <p>Base URL of the Imagor/Thumbor server.</p>"},{"location":"reference/imgora/#imgora.Thumbor(image)","title":"<code>image</code>","text":"(<code>str</code>, default:                   <code>''</code> )           \u2013            <p>Path or URL of the source image.</p>"},{"location":"reference/imgora/#imgora.Thumbor(signer)","title":"<code>signer</code>","text":"(<code>Signer | None</code>, default:                   <code>None</code> )           \u2013            <p>The signer to use. If None the default is used.</p>"},{"location":"reference/imgora/#imgora.Thumbor-attributes","title":"Attributes","text":""},{"location":"reference/imgora/#imgora.Thumbor.signer","title":"signer  <code>property</code>","text":"<pre><code>signer: Signer | None\n</code></pre>"},{"location":"reference/imgora/#imgora.Thumbor.op_order","title":"op_order  <code>property</code> <code>writable</code>","text":"<pre><code>op_order: tuple[str, ...]\n</code></pre> <p>Returns the operation order</p>"},{"location":"reference/imgora/#imgora.Thumbor-functions","title":"Functions","text":""},{"location":"reference/imgora/#imgora.Thumbor.add_operation","title":"add_operation","text":"<pre><code>add_operation(\n    op: str | Operation,\n    arg: str | None = None,\n    unique: bool = True,\n) -&gt; None\n</code></pre> <p>Add an operation to the image processing pipeline.</p> <p>Parameters:</p>"},{"location":"reference/imgora/#imgora.Thumbor.add_operation(op)","title":"<code>op</code>","text":"(<code>str | Operation</code>)           \u2013            <p>The name of the operation or an Operation object.</p>"},{"location":"reference/imgora/#imgora.Thumbor.add_operation(arg)","title":"<code>arg</code>","text":"(<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>Optional argument for the operation.</p>"},{"location":"reference/imgora/#imgora.Thumbor.add_operation(unique)","title":"<code>unique</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Whether to remove existing operations with the same name before adding the new one.</p>"},{"location":"reference/imgora/#imgora.Thumbor.add_filter","title":"add_filter","text":"<pre><code>add_filter(\n    filter: str | Filter, *args: Any, unique: bool = True\n) -&gt; None\n</code></pre> <p>Add a filter to the image processing pipeline.</p> <p>Parameters:</p>"},{"location":"reference/imgora/#imgora.Thumbor.add_filter(filter)","title":"<code>filter</code>","text":"(<code>str | Filter</code>)           \u2013            <p>The name of the filter or a Filter object.</p>"},{"location":"reference/imgora/#imgora.Thumbor.add_filter(unique)","title":"<code>unique</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Whether to remove existing filters with the same name before adding the new one.</p>"},{"location":"reference/imgora/#imgora.Thumbor.add_filter(*args)","title":"<code>*args</code>","text":"(<code>Any</code>, default:                   <code>()</code> )           \u2013            <p>Arguments for the filter.</p>"},{"location":"reference/imgora/#imgora.Thumbor.remove","title":"remove","text":"<pre><code>remove(\n    name: str,\n    include: tuple[\n        Literal[\"operations\", \"filters\"], ...\n    ] = (\"operations\", \"filters\"),\n) -&gt; None\n</code></pre> <p>Remove an operation or filter from the image processing pipeline by name.</p> <p>For example:</p> <pre><code>image.remove(\"crop\")\nimage.remove(\"upscale\")\n</code></pre> <p>Parameters:</p>"},{"location":"reference/imgora/#imgora.Thumbor.remove(name)","title":"<code>name</code>","text":"(<code>str</code>)           \u2013            <p>The name of the operation or filter to remove.</p>"},{"location":"reference/imgora/#imgora.Thumbor.remove_filters","title":"remove_filters","text":"<pre><code>remove_filters() -&gt; None\n</code></pre> <p>Remove all filters from the image processing pipeline.</p>"},{"location":"reference/imgora/#imgora.Thumbor.remove_operations","title":"remove_operations","text":"<pre><code>remove_operations() -&gt; None\n</code></pre> <p>Remove all operations from the image processing pipeline.</p>"},{"location":"reference/imgora/#imgora.Thumbor.get_filter","title":"get_filter","text":"<pre><code>get_filter(name: str) -&gt; Filter | None\n</code></pre> <p>Get a filter by name.</p>"},{"location":"reference/imgora/#imgora.Thumbor.get_operation","title":"get_operation","text":"<pre><code>get_operation(name: str) -&gt; Operation | None\n</code></pre> <p>Get an operation by name.</p>"},{"location":"reference/imgora/#imgora.Thumbor.with_image","title":"with_image","text":"<pre><code>with_image(image: str) -&gt; Self\n</code></pre> <p>Set the source image.</p> <p>Parameters:</p>"},{"location":"reference/imgora/#imgora.Thumbor.with_image(image)","title":"<code>image</code>","text":"(<code>str</code>)           \u2013            <p>Path or URL of the source image.</p>"},{"location":"reference/imgora/#imgora.Thumbor.with_base","title":"with_base","text":"<pre><code>with_base(base_url: str) -&gt; Self\n</code></pre> <p>Set the base URL of the Imagor/Thumbor server.</p> <p>Parameters:</p>"},{"location":"reference/imgora/#imgora.Thumbor.with_base(base_url)","title":"<code>base_url</code>","text":"(<code>str</code>)           \u2013            <p>Base URL of the server.</p>"},{"location":"reference/imgora/#imgora.Thumbor.path","title":"path","text":"<pre><code>path(\n    with_image: str | None = None,\n    encode_image: bool = True,\n    signer: Signer | None = None,\n) -&gt; str\n</code></pre> <p>Generate the URL path with all operations and filters applied.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The generated URL path.</p> </li> </ul>"},{"location":"reference/imgora/#imgora.Thumbor.path(with_image)","title":"<code>with_image</code>","text":"(<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>The image to use. If None, the default image is used.</p>"},{"location":"reference/imgora/#imgora.Thumbor.path(encode_image)","title":"<code>encode_image</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Whether to encode the image path.</p>"},{"location":"reference/imgora/#imgora.Thumbor.path(signer)","title":"<code>signer</code>","text":"(<code>Signer | None</code>, default:                   <code>None</code> )           \u2013            <p>The signer to use. If None the default is used.</p>"},{"location":"reference/imgora/#imgora.Thumbor.url","title":"url","text":"<pre><code>url(\n    with_image: str | None = None,\n    with_base: str | None = None,\n    signer: Signer | None = None,\n) -&gt; str\n</code></pre> <p>Generate the full URL.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The complete URL with all operations and filters applied.</p> </li> </ul>"},{"location":"reference/imgora/#imgora.Thumbor.url(with_image)","title":"<code>with_image</code>","text":"(<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>The image to use. If None, the default image is used.</p>"},{"location":"reference/imgora/#imgora.Thumbor.url(with_base)","title":"<code>with_base</code>","text":"(<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>The base URL to use. If None, the default base URL is used.</p>"},{"location":"reference/imgora/#imgora.Thumbor.url(signer)","title":"<code>signer</code>","text":"(<code>Signer | None</code>, default:                   <code>None</code> )           \u2013            <p>The signer to use. If None the default is used.</p>"},{"location":"reference/imgora/#imgora.Thumbor.sign_path","title":"sign_path","text":"<pre><code>sign_path(path: str, signer: Signer | None = None) -&gt; str\n</code></pre> <p>Sign a URL path using HMAC.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The signature.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>ValueError</code>             \u2013            <p>If no key is configured for signing.</p> </li> </ul>"},{"location":"reference/imgora/#imgora.Thumbor.sign_path(path)","title":"<code>path</code>","text":"(<code>str</code>)           \u2013            <p>The URL path to sign. The path is not encoded, this needs to be done previously.</p>"},{"location":"reference/imgora/#imgora.Thumbor.sign_path(signer)","title":"<code>signer</code>","text":"(<code>Signer | None</code>, default:                   <code>None</code> )           \u2013            <p>The signer to use. If None the default is used.</p>"},{"location":"reference/imgora/#imgora.Thumbor.encode_image_path","title":"encode_image_path","text":"<pre><code>encode_image_path(path: str) -&gt; str\n</code></pre> <p>Encode the image path with <code>urllib.parse.quote</code>.</p>"},{"location":"reference/imgora/#imgora.Thumbor.sign","title":"sign","text":"<pre><code>sign(\n    unsafe: bool = False, signer: Signer | None = None\n) -&gt; Self\n</code></pre> <p>Set the signer.</p> <p>Parameters:</p>"},{"location":"reference/imgora/#imgora.Thumbor.sign(unsafe)","title":"<code>unsafe</code>","text":"(<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>If True, skip URL signing even if a key is configured.</p>"},{"location":"reference/imgora/#imgora.Thumbor.sign(signer)","title":"<code>signer</code>","text":"(<code>Signer | None</code>, default:                   <code>None</code> )           \u2013            <p>The signer to use. If None the default is used.</p>"},{"location":"reference/imgora/#imgora.Thumbor.unsafe","title":"unsafe","text":"<pre><code>unsafe() -&gt; Self\n</code></pre> <p>Set the signer to unsafe.</p>"},{"location":"reference/imgora/#imgora.Thumbor.trim","title":"trim","text":"<pre><code>trim() -&gt; Self\n</code></pre> <p>Trim the image.</p>"},{"location":"reference/imgora/#imgora.Thumbor.crop","title":"crop","text":"<pre><code>crop(\n    left: int | float | None = None,\n    top: int | float | None = None,\n    right: int | float | None = None,\n    bottom: int | float | None = None,\n    width: int | float | None = None,\n    height: int | float | None = None,\n    halign: HALIGN | None = None,\n    valign: VALIGN | None = None,\n) -&gt; Self\n</code></pre> <p>Manually crop the image. Coordinates are in pixel or float values between 0 and 1 (percentage of image dimensions) The coordiantes start in the top/left corner and go down and right.</p> <p>Parameters:</p> <p>Examples</p> CodeCoordinate System <pre><code>img.crop(left=5, top=2, right=10, bottom=4)\nimg.crop(left=5, top=2, right=-4, bottom=-2)\nimg.crop(left=5, top=2, width=5, height=2)\nimg.crop(left=0.3, top=0.42, width=0.5, height=0.4)\n</code></pre> <pre><code>  0    5    10          x\n0 *=============*-------&gt;\n  #    .    .   #\n2 #....+~~~~~+  #\n  # . .|     |  #\n4 # . .+~~~~~+  #\n  *=============*\n  |\ny v\n</code></pre>"},{"location":"reference/imgora/#imgora.Thumbor.crop(left)","title":"<code>left</code>","text":"(<code>int | float | None</code>, default:                   <code>None</code> )           \u2013            <p>Left coordinate of the crop (pixel or relative).</p>"},{"location":"reference/imgora/#imgora.Thumbor.crop(top)","title":"<code>top</code>","text":"(<code>int | float | None</code>, default:                   <code>None</code> )           \u2013            <p>Top coordinate of the crop (pixel or relative).</p>"},{"location":"reference/imgora/#imgora.Thumbor.crop(right)","title":"<code>right</code>","text":"(<code>int | float | None</code>, default:                   <code>None</code> )           \u2013            <p>Right coordinate of the crop (pixel or relative), can be negative.</p>"},{"location":"reference/imgora/#imgora.Thumbor.crop(bottom)","title":"<code>bottom</code>","text":"(<code>int | float | None</code>, default:                   <code>None</code> )           \u2013            <p>Bottom coordinate of the crop (pixel or relative), can be negative.</p>"},{"location":"reference/imgora/#imgora.Thumbor.crop(width)","title":"<code>width</code>","text":"(<code>int | float | None</code>, default:                   <code>None</code> )           \u2013            <p>Width of the crop (pixel or relative).</p>"},{"location":"reference/imgora/#imgora.Thumbor.crop(height)","title":"<code>height</code>","text":"(<code>int | float | None</code>, default:                   <code>None</code> )           \u2013            <p>Height of the crop (pixel or relative).</p>"},{"location":"reference/imgora/#imgora.Thumbor.crop(halign)","title":"<code>halign</code>","text":"(<code>HALIGN | None</code>, default:                   <code>None</code> )           \u2013            <p>Horizontal alignment of the crop (left, center, right).</p>"},{"location":"reference/imgora/#imgora.Thumbor.crop(valign)","title":"<code>valign</code>","text":"(<code>VALIGN | None</code>, default:                   <code>None</code> )           \u2013            <p>Vertical alignment of the crop (top, middle, bottom).</p>"},{"location":"reference/imgora/#imgora.Thumbor.meta","title":"meta","text":"<pre><code>meta() -&gt; Self\n</code></pre> <p>Shows meta information of the image.</p>"},{"location":"reference/imgora/#imgora.Thumbor.background_color","title":"background_color","text":"<pre><code>background_color(color: str) -&gt; Self\n</code></pre> <p>The <code>background_color</code> filter sets the background layer to the specified color. This is specifically useful when converting transparent images (PNG) to JPEG.</p> <p>Parameters:</p>"},{"location":"reference/imgora/#imgora.Thumbor.background_color(color)","title":"<code>color</code>","text":"(<code>str</code>)           \u2013            <p>Background color in hex format without # or 'auto' (e.g., 'FFFFFF', 'aab').</p>"},{"location":"reference/imgora/#imgora.Thumbor.blur","title":"blur","text":"<pre><code>blur(radius: int, sigma: int | None = None) -&gt; Self\n</code></pre> <p>Apply gaussian blur to the image.</p> <p>Parameters:</p>"},{"location":"reference/imgora/#imgora.Thumbor.blur(radius)","title":"<code>radius</code>","text":"(<code>int</code>)           \u2013            <p>Radius of the blur effect (0-150). The bigger the radius, the more blur.</p>"},{"location":"reference/imgora/#imgora.Thumbor.blur(sigma)","title":"<code>sigma</code>","text":"(<code>int | None</code>, default:                   <code>None</code> )           \u2013            <p>Standard deviation of the gaussian kernel, defaults to <code>radius</code>.</p>"},{"location":"reference/imgora/#imgora.Thumbor.brightness","title":"brightness","text":"<pre><code>brightness(amount: float) -&gt; Self\n</code></pre> <p>Adjust the image brightness.</p> <p>Parameters:</p>"},{"location":"reference/imgora/#imgora.Thumbor.brightness(amount)","title":"<code>amount</code>","text":"(<code>float</code>)           \u2013            <p>Adjustment amount (-100 to 100).</p>"},{"location":"reference/imgora/#imgora.Thumbor.contrast","title":"contrast","text":"<pre><code>contrast(amount: float) -&gt; Self\n</code></pre> <p>Adjust the image contrast.</p> <p>Parameters:</p>"},{"location":"reference/imgora/#imgora.Thumbor.contrast(amount)","title":"<code>amount</code>","text":"(<code>float</code>)           \u2013            <p>Adjustment amount (-100 to 100).</p>"},{"location":"reference/imgora/#imgora.Thumbor.rgb","title":"rgb","text":"<pre><code>rgb(r: float = 0, g: float = 0, b: float = 0) -&gt; Self\n</code></pre> <p>Adjust the RGB channels of the image.</p> <p>Parameters:</p>"},{"location":"reference/imgora/#imgora.Thumbor.rgb(r)","title":"<code>r</code>","text":"(<code>float</code>, default:                   <code>0</code> )           \u2013            <p><code>-100</code> to <code>100</code>. Red channel adjustment.</p>"},{"location":"reference/imgora/#imgora.Thumbor.rgb(g)","title":"<code>g</code>","text":"(<code>float</code>, default:                   <code>0</code> )           \u2013            <p><code>-100</code> to <code>100</code>. Green channel adjustment.</p>"},{"location":"reference/imgora/#imgora.Thumbor.rgb(b)","title":"<code>b</code>","text":"(<code>float</code>, default:                   <code>0</code> )           \u2013            <p><code>-100</code> to <code>100</code>. Blue channel adjustment.</p>"},{"location":"reference/imgora/#imgora.Thumbor.radius","title":"radius","text":"<pre><code>radius(\n    rx: int, ry: int | None = None, color: str | None = None\n) -&gt; Self\n</code></pre> <p>Add rounded corners to the image (alias for round_corner).</p> <p>Parameters:</p>"},{"location":"reference/imgora/#imgora.Thumbor.radius(rx)","title":"<code>rx</code>","text":"(<code>int</code>)           \u2013            <p>X radius of the corners in pixels.</p>"},{"location":"reference/imgora/#imgora.Thumbor.radius(ry)","title":"<code>ry</code>","text":"(<code>int | None</code>, default:                   <code>None</code> )           \u2013            <p>Y radius of the corners in pixels (defaults to rx).</p>"},{"location":"reference/imgora/#imgora.Thumbor.radius(color)","title":"<code>color</code>","text":"(<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>Corner color in CSS format (default: \"none\").</p>"},{"location":"reference/imgora/#imgora.Thumbor.grayscale","title":"grayscale","text":"<pre><code>grayscale() -&gt; Self\n</code></pre> <p>Convert the image to grayscale.</p>"},{"location":"reference/imgora/#imgora.Thumbor.strip_exif","title":"strip_exif","text":"<pre><code>strip_exif() -&gt; Self\n</code></pre> <p>Remove EXIF metadata from the image.</p>"},{"location":"reference/imgora/#imgora.Thumbor.strip_icc","title":"strip_icc","text":"<pre><code>strip_icc() -&gt; Self\n</code></pre> <p>Remove ICC profile from the image.</p>"},{"location":"reference/imgora/#imgora.Thumbor.max_bytes","title":"max_bytes","text":"<pre><code>max_bytes(amount: int) -&gt; Self\n</code></pre> <p>Set the maximum file size in bytes for the output image.</p> <p>Parameters:</p>"},{"location":"reference/imgora/#imgora.Thumbor.max_bytes(amount)","title":"<code>amount</code>","text":"(<code>int</code>)           \u2013            <p>Maximum file size in bytes.</p>"},{"location":"reference/imgora/#imgora.Thumbor.proportion","title":"proportion","text":"<pre><code>proportion(percentage: float) -&gt; Self\n</code></pre> <p>Scale the image to the specified percentage of its original size.</p> <p>Parameters:</p>"},{"location":"reference/imgora/#imgora.Thumbor.proportion(percentage)","title":"<code>percentage</code>","text":"(<code>float</code>)           \u2013            <p>Scale percentage (0-100).</p>"},{"location":"reference/imgora/#imgora.Thumbor.rotate","title":"rotate","text":"<pre><code>rotate(angle: int) -&gt; Self\n</code></pre> <p>Rotate the given image by the specified angle after processing.</p> <p>This is different from the 'orient' filter which rotates the image before processing.</p> <p>Parameters:</p>"},{"location":"reference/imgora/#imgora.Thumbor.rotate(angle)","title":"<code>angle</code>","text":"(<code>int</code>)           \u2013            <p><code>0</code>, <code>90</code>, <code>180</code>, <code>270</code>. Rotation angle.</p>"},{"location":"reference/imgora/#imgora.Thumbor.get_size","title":"get_size","text":"<pre><code>get_size(original: bool = False) -&gt; tuple[int, int]\n</code></pre> <p>Returns the image size.</p>"},{"location":"reference/imgora/#imgora.Thumbor.resize","title":"resize","text":"<pre><code>resize(\n    width: int,\n    height: int,\n    method: Literal[\"fit-in\", \"stretch\", \"smart\", \"focal\"]\n    | None = None,\n    upscale: bool = True,\n) -&gt; Self\n</code></pre> <p>Resize the image to the exact dimensions.</p> <p>Parameters:</p>"},{"location":"reference/imgora/#imgora.Thumbor.resize(width)","title":"<code>width</code>","text":"(<code>int</code>)           \u2013            <p>Target width in pixels.</p>"},{"location":"reference/imgora/#imgora.Thumbor.resize(height)","title":"<code>height</code>","text":"(<code>int</code>)           \u2013            <p>Target height in pixels.</p>"},{"location":"reference/imgora/#imgora.Thumbor.resize(method)","title":"<code>method</code>","text":"(<code>Literal['fit-in', 'stretch', 'smart', 'focal'] | None</code>, default:                   <code>None</code> )           \u2013            <p>Resizing method (fit-in, stretch, smart).</p>"},{"location":"reference/imgora/#imgora.Thumbor.resize(upscale)","title":"<code>upscale</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Whether to upscale the image.</p>"},{"location":"reference/imgora/#imgora.Thumbor.auto_jpg","title":"auto_jpg","text":"<pre><code>auto_jpg() -&gt; Self\n</code></pre> <p>Automatically convert to JPEG (overwrite <code>AUTO_PNG_TO_JPG</code> variable).</p>"},{"location":"reference/imgora/#imgora.Thumbor.convolution","title":"convolution","text":"<pre><code>convolution(\n    matrix: List[List[float]], normalize: bool = True\n) -&gt; Self\n</code></pre> <p>This filter runs a convolution matrix (or kernel) on the image. See Kernel (image processing) for details on the process. Edge pixels are always extended outside the image area.</p> <p>Parameters:</p>"},{"location":"reference/imgora/#imgora.Thumbor.convolution(matrix)","title":"<code>matrix</code>","text":"(<code>List[List[float]]</code>)           \u2013            <p>2D convolution matrix (NxN).</p>"},{"location":"reference/imgora/#imgora.Thumbor.convolution(normalize)","title":"<code>normalize</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Whether to normalize the matrix.</p>"},{"location":"reference/imgora/#imgora.Thumbor.cover","title":"cover","text":"<pre><code>cover() -&gt; Self\n</code></pre> <p>This filter is used in GIFs to extract their first frame as the image to be used as cover.</p>"},{"location":"reference/imgora/#imgora.Thumbor.equalize","title":"equalize","text":"<pre><code>equalize() -&gt; Self\n</code></pre> <p>This filter equalizes the color distribution in the image.</p>"},{"location":"reference/imgora/#imgora.Thumbor.extract_focal","title":"extract_focal","text":"<pre><code>extract_focal() -&gt; Self\n</code></pre> <p>Extract the focal points from the image.</p> <p>More information</p>"},{"location":"reference/imgora/#imgora.Thumbor.fill","title":"fill","text":"<pre><code>fill(color: str, fill_transparent: bool = False) -&gt; Self\n</code></pre> <p>This filter returns an image sized exactly as requested independently of its ratio. It will fill the missing area with the specified color. It is usually combined with the <code>fit-in</code> or <code>adaptive-fit-in</code> options.</p> <p>More information</p> <p>Parameters:</p>"},{"location":"reference/imgora/#imgora.Thumbor.fill(color)","title":"<code>color</code>","text":"(<code>str</code>)           \u2013            <p>Fill color in hex format without <code>#</code> (e.g., 'FFFFFF', 'aab').</p>"},{"location":"reference/imgora/#imgora.Thumbor.fill(fill_transparent)","title":"<code>fill_transparent</code>","text":"(<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Whether to fill transparent areas.</p>"},{"location":"reference/imgora/#imgora.Thumbor.focal","title":"focal","text":"<pre><code>focal(\n    left: int | float | None = None,\n    top: int | float | None = None,\n    right: int | float | None = None,\n    bottom: int | float | None = None,\n) -&gt; Self\n</code></pre> <p>Set the focal point of the image, which is used in later transforms (e.g. <code>crop</code>).</p> <p>The coordinates are either in pixel of float values between 0 and 1 (percentage of image dimensions)</p> <p>Coordinated by a region of left-top point AxB and right-bottom point CxD, or a point X,Y.</p> <p>Parameters:</p>"},{"location":"reference/imgora/#imgora.Thumbor.focal(left)","title":"<code>left</code>","text":"(<code>int | float | None</code>, default:                   <code>None</code> )           \u2013            <p>Left or x coordinate of the focal region/point, either in pixel or relative (float from 0 to 1).</p>"},{"location":"reference/imgora/#imgora.Thumbor.focal(top)","title":"<code>top</code>","text":"(<code>int | float | None</code>, default:                   <code>None</code> )           \u2013            <p>Top or y coordinate of the focal region/point, either in pixel or relative (float from 0 to 1).</p>"},{"location":"reference/imgora/#imgora.Thumbor.focal(right)","title":"<code>right</code>","text":"(<code>int | float | None</code>, default:                   <code>None</code> )           \u2013            <p>Right coordinate of the focal region, either in pixel or relative (float from 0 to 1).</p>"},{"location":"reference/imgora/#imgora.Thumbor.focal(bottom)","title":"<code>bottom</code>","text":"(<code>int | float | None</code>, default:                   <code>None</code> )           \u2013            <p>Bottom coordinate of the focal region, either in pixel or relative (float from 0 to 1).</p>"},{"location":"reference/imgora/#imgora.Thumbor.format","title":"format","text":"<pre><code>format(\n    fmt: ImageFormats, quality: int | None = None\n) -&gt; Self\n</code></pre> <p>Convert the image to the specified format.</p> <p>Parameters:</p>"},{"location":"reference/imgora/#imgora.Thumbor.format(fmt)","title":"<code>fmt</code>","text":"(<code>ImageFormats</code>)           \u2013            <p>Output format (jpeg, jpg, png, webp, gif, etc.).</p>"},{"location":"reference/imgora/#imgora.Thumbor.format(quality)","title":"<code>quality</code>","text":"(<code>int | None</code>, default:                   <code>None</code> )           \u2013            <p><code>1</code> to <code>100</code>. Quality setting for lossy formats (e.g. jpg, does nothing for png).</p>"},{"location":"reference/imgora/#imgora.Thumbor.noise","title":"noise","text":"<pre><code>noise(amount: int) -&gt; Self\n</code></pre> <p>Add noise to the image.</p> <p>Parameters:</p>"},{"location":"reference/imgora/#imgora.Thumbor.noise(amount)","title":"<code>amount</code>","text":"(<code>int</code>)           \u2013            <p><code>0</code> to <code>100</code>. Amount of noise in %.</p>"},{"location":"reference/imgora/#imgora.Thumbor.quality","title":"quality","text":"<pre><code>quality(amount: int) -&gt; Self\n</code></pre> <p>Set the quality of the output image.</p> <p>Parameters:</p>"},{"location":"reference/imgora/#imgora.Thumbor.quality(amount)","title":"<code>amount</code>","text":"(<code>int</code>)           \u2013            <p><code>1</code> to <code>100</code>. Quality setting for lossy formats (e.g. jpg, does nothing for png).</p>"},{"location":"reference/imgora/#imgora.Thumbor.red_eye","title":"red_eye","text":"<pre><code>red_eye() -&gt; Self\n</code></pre> <p>Automatically detect and correct red-eye in photos.</p>"},{"location":"reference/imgora/#imgora.Thumbor.round_corner","title":"round_corner","text":"<pre><code>round_corner(\n    rx: int,\n    ry: int | None = None,\n    color: str | None | tuple[int, int, int] = None,\n) -&gt; Self\n</code></pre> <p>Add rounded corners to the image.</p> <p>Parameters:</p> <p>Raises:</p> <ul> <li> <code>ValueError</code>             \u2013            <p>If 'ry' is used.</p> </li> </ul>"},{"location":"reference/imgora/#imgora.Thumbor.round_corner(rx)","title":"<code>rx</code>","text":"(<code>int</code>)           \u2013            <p>X radius of the corners in pixels.</p>"},{"location":"reference/imgora/#imgora.Thumbor.round_corner(ry)","title":"<code>ry</code>","text":"(<code>int | None</code>, default:                   <code>None</code> )           \u2013            <p>Y radius of the corners in pixels (not supported at the moment).</p>"},{"location":"reference/imgora/#imgora.Thumbor.round_corner(color)","title":"<code>color</code>","text":"(<code>str | None | tuple[int, int, int]</code>, default:                   <code>None</code> )           \u2013            <p>Corner color in CSS format (default: \"none\"), if none is used transparent background is used if possible.</p>"},{"location":"reference/imgora/#imgora.Thumbor.saturation","title":"saturation","text":"<pre><code>saturation(amount: float) -&gt; Self\n</code></pre> <p>Adjust the image saturation.</p> <p>Parameters:</p>"},{"location":"reference/imgora/#imgora.Thumbor.saturation(amount)","title":"<code>amount</code>","text":"(<code>float</code>)           \u2013            <p><code>-100</code> to <code>100</code>. The amount (in %) to change the image saturation.     Positive numbers increase saturation and negative numbers decrease saturation.</p>"},{"location":"reference/imgora/#imgora.Thumbor.sharpen","title":"sharpen","text":"<pre><code>sharpen(\n    amount: float,\n    radius: float = 1.0,\n    luminance_only: bool = True,\n) -&gt; Self\n</code></pre> <p>Sharpen the image.</p> <p>Parameters:</p>"},{"location":"reference/imgora/#imgora.Thumbor.sharpen(amount)","title":"<code>amount</code>","text":"(<code>float</code>)           \u2013            <p><code>0.0</code> to around <code>10.0</code>. Sharpening amount.</p>"},{"location":"reference/imgora/#imgora.Thumbor.sharpen(radius)","title":"<code>radius</code>","text":"(<code>float</code>, default:                   <code>1.0</code> )           \u2013            <p><code>0.0</code> to around <code>2.0</code>. Sharpening radius.</p>"},{"location":"reference/imgora/#imgora.Thumbor.sharpen(luminance_only)","title":"<code>luminance_only</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Whether to only sharpen the luminance channel.</p>"},{"location":"reference/imgora/#imgora.Thumbor.stretch","title":"stretch","text":"<pre><code>stretch() -&gt; Self\n</code></pre> <p>This filter stretches the image until it fits the required width and height, instead of cropping the image.</p>"},{"location":"reference/imgora/#imgora.Thumbor.strip_metadata","title":"strip_metadata","text":"<pre><code>strip_metadata() -&gt; Self\n</code></pre> <p>Remove all metadata from the image.</p>"},{"location":"reference/imgora/#imgora.Thumbor.upscale","title":"upscale","text":"<pre><code>upscale(upscale: bool = True) -&gt; Self\n</code></pre> <p>Enable upscaling of the image beyond its original dimensions. This only makes sense with <code>fit-in</code> or <code>adaptive-fit-in</code>.</p> <p>More information</p>"},{"location":"reference/imgora/#imgora.WsrvNl","title":"WsrvNl","text":"<pre><code>WsrvNl(\n    base_url: str = \"\",\n    image: str = \"\",\n    signer: Signer | None = None,\n)\n</code></pre> <p>wsrv.nl image processor with wsrv-specific operations and filters.</p> <p>Initialize a new image processor.</p> <p>Parameters:</p> <p>Methods:</p> <ul> <li> <code>add_operation</code>             \u2013              <p>Add an operation to the image processing pipeline.</p> </li> <li> <code>add_filter</code>             \u2013              <p>Add a filter to the image processing pipeline.</p> </li> <li> <code>remove</code>             \u2013              <p>Remove an operation or filter from the image processing pipeline by name.</p> </li> <li> <code>remove_filters</code>             \u2013              <p>Remove all filters from the image processing pipeline.</p> </li> <li> <code>remove_operations</code>             \u2013              <p>Remove all operations from the image processing pipeline.</p> </li> <li> <code>get_filter</code>             \u2013              <p>Get a filter by name.</p> </li> <li> <code>get_operation</code>             \u2013              <p>Get an operation by name.</p> </li> <li> <code>with_image</code>             \u2013              <p>Set the source image.</p> </li> <li> <code>with_base</code>             \u2013              <p>Set the base URL of the Imagor/Thumbor server.</p> </li> <li> <code>url</code>             \u2013              <p>Generate the full URL.</p> </li> <li> <code>sign_path</code>             \u2013              <p>Sign a URL path using HMAC.</p> </li> <li> <code>encode_image_path</code>             \u2013              <p>Encode the image path with <code>urllib.parse.quote</code>.</p> </li> <li> <code>sign</code>             \u2013              <p>Set the signer.</p> </li> <li> <code>unsafe</code>             \u2013              <p>Set the signer to unsafe.</p> </li> <li> <code>get_size</code>             \u2013              <p>Returns the image size.</p> </li> <li> <code>trim</code>             \u2013              <p>Trim the image.</p> </li> <li> <code>brightness</code>             \u2013              <p>Adjust brightness of the image.</p> </li> <li> <code>rgb</code>             \u2013              <p>Adjust the RGB channels of the image.</p> </li> <li> <code>quality</code>             \u2013              <p>Set the image quality (JPEG only).</p> </li> <li> <code>radius</code>             \u2013              <p>Add rounded corners to the image (alias for round_corner).</p> </li> <li> <code>path</code>             \u2013              </li> <li> <code>resize</code>             \u2013              <p>Resize the image to the exact dimensions.</p> </li> <li> <code>crop</code>             \u2013              <p>Manually crop the image. Coordinates are in pixel or float values between 0 and 1 (percentage of image dimensions)</p> </li> <li> <code>grayscale</code>             \u2013              <p>Convert the image to grayscale.</p> </li> <li> <code>upscale</code>             \u2013              <p>upscale the image if fit-in is used</p> </li> <li> <code>rotate</code>             \u2013              <p>Rotate the given image by the specified angle after processing.</p> </li> <li> <code>background_color</code>             \u2013              <p>The <code>background_color</code> filter sets the background layer to the specified color.</p> </li> <li> <code>blur</code>             \u2013              <p>Apply gaussian blur to the image.</p> </li> <li> <code>contrast</code>             \u2013              <p>Adjust contrast of the image.</p> </li> <li> <code>sharpen</code>             \u2013              <p>Sharpen the image.</p> </li> <li> <code>focal</code>             \u2013              <p>Set the focal point of the image, which is used in later transforms (e.g. <code>crop</code>).</p> </li> <li> <code>format</code>             \u2013              <p>Convert the image to the specified format.</p> </li> <li> <code>round_corner</code>             \u2013              <p>Add rounded corners to the image, it is not supported by wsrv.nl.</p> </li> <li> <code>meta</code>             \u2013              <p>Shows meta information of the image.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>signer</code>               (<code>Signer | None</code>)           \u2013            </li> <li> <code>op_order</code>               (<code>tuple[str, ...]</code>)           \u2013            <p>Returns the operation order</p> </li> </ul>"},{"location":"reference/imgora/#imgora.WsrvNl(base_url)","title":"<code>base_url</code>","text":"(<code>str</code>, default:                   <code>''</code> )           \u2013            <p>Base URL of the Imagor/Thumbor server.</p>"},{"location":"reference/imgora/#imgora.WsrvNl(image)","title":"<code>image</code>","text":"(<code>str</code>, default:                   <code>''</code> )           \u2013            <p>Path or URL of the source image.</p>"},{"location":"reference/imgora/#imgora.WsrvNl(signer)","title":"<code>signer</code>","text":"(<code>Signer | None</code>, default:                   <code>None</code> )           \u2013            <p>The signer to use. Not needed for wsrv.nl.</p>"},{"location":"reference/imgora/#imgora.WsrvNl-attributes","title":"Attributes","text":""},{"location":"reference/imgora/#imgora.WsrvNl.signer","title":"signer  <code>property</code>","text":"<pre><code>signer: Signer | None\n</code></pre>"},{"location":"reference/imgora/#imgora.WsrvNl.op_order","title":"op_order  <code>property</code> <code>writable</code>","text":"<pre><code>op_order: tuple[str, ...]\n</code></pre> <p>Returns the operation order</p>"},{"location":"reference/imgora/#imgora.WsrvNl-functions","title":"Functions","text":""},{"location":"reference/imgora/#imgora.WsrvNl.add_operation","title":"add_operation","text":"<pre><code>add_operation(\n    op: str | Operation,\n    arg: str | None = None,\n    unique: bool = True,\n) -&gt; None\n</code></pre> <p>Add an operation to the image processing pipeline.</p> <p>Parameters:</p>"},{"location":"reference/imgora/#imgora.WsrvNl.add_operation(op)","title":"<code>op</code>","text":"(<code>str | Operation</code>)           \u2013            <p>The name of the operation or an Operation object.</p>"},{"location":"reference/imgora/#imgora.WsrvNl.add_operation(arg)","title":"<code>arg</code>","text":"(<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>Optional argument for the operation.</p>"},{"location":"reference/imgora/#imgora.WsrvNl.add_operation(unique)","title":"<code>unique</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Whether to remove existing operations with the same name before adding the new one.</p>"},{"location":"reference/imgora/#imgora.WsrvNl.add_filter","title":"add_filter","text":"<pre><code>add_filter(\n    filter: str | Filter, *args: Any, unique: bool = True\n) -&gt; None\n</code></pre> <p>Add a filter to the image processing pipeline.</p> <p>Parameters:</p>"},{"location":"reference/imgora/#imgora.WsrvNl.add_filter(filter)","title":"<code>filter</code>","text":"(<code>str | Filter</code>)           \u2013            <p>The name of the filter or a Filter object.</p>"},{"location":"reference/imgora/#imgora.WsrvNl.add_filter(unique)","title":"<code>unique</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Whether to remove existing filters with the same name before adding the new one.</p>"},{"location":"reference/imgora/#imgora.WsrvNl.add_filter(*args)","title":"<code>*args</code>","text":"(<code>Any</code>, default:                   <code>()</code> )           \u2013            <p>Arguments for the filter.</p>"},{"location":"reference/imgora/#imgora.WsrvNl.remove","title":"remove","text":"<pre><code>remove(\n    name: str,\n    include: tuple[\n        Literal[\"operations\", \"filters\"], ...\n    ] = (\"operations\", \"filters\"),\n) -&gt; None\n</code></pre> <p>Remove an operation or filter from the image processing pipeline by name.</p> <p>For example:</p> <pre><code>image.remove(\"crop\")\nimage.remove(\"upscale\")\n</code></pre> <p>Parameters:</p>"},{"location":"reference/imgora/#imgora.WsrvNl.remove(name)","title":"<code>name</code>","text":"(<code>str</code>)           \u2013            <p>The name of the operation or filter to remove.</p>"},{"location":"reference/imgora/#imgora.WsrvNl.remove_filters","title":"remove_filters","text":"<pre><code>remove_filters() -&gt; None\n</code></pre> <p>Remove all filters from the image processing pipeline.</p>"},{"location":"reference/imgora/#imgora.WsrvNl.remove_operations","title":"remove_operations","text":"<pre><code>remove_operations() -&gt; None\n</code></pre> <p>Remove all operations from the image processing pipeline.</p>"},{"location":"reference/imgora/#imgora.WsrvNl.get_filter","title":"get_filter","text":"<pre><code>get_filter(name: str) -&gt; Filter | None\n</code></pre> <p>Get a filter by name.</p>"},{"location":"reference/imgora/#imgora.WsrvNl.get_operation","title":"get_operation","text":"<pre><code>get_operation(name: str) -&gt; Operation | None\n</code></pre> <p>Get an operation by name.</p>"},{"location":"reference/imgora/#imgora.WsrvNl.with_image","title":"with_image","text":"<pre><code>with_image(image: str) -&gt; Self\n</code></pre> <p>Set the source image.</p> <p>Parameters:</p>"},{"location":"reference/imgora/#imgora.WsrvNl.with_image(image)","title":"<code>image</code>","text":"(<code>str</code>)           \u2013            <p>Path or URL of the source image.</p>"},{"location":"reference/imgora/#imgora.WsrvNl.with_base","title":"with_base","text":"<pre><code>with_base(base_url: str) -&gt; Self\n</code></pre> <p>Set the base URL of the Imagor/Thumbor server.</p> <p>Parameters:</p>"},{"location":"reference/imgora/#imgora.WsrvNl.with_base(base_url)","title":"<code>base_url</code>","text":"(<code>str</code>)           \u2013            <p>Base URL of the server.</p>"},{"location":"reference/imgora/#imgora.WsrvNl.url","title":"url","text":"<pre><code>url(\n    with_image: str | None = None,\n    with_base: str | None = None,\n    signer: Signer | None = None,\n) -&gt; str\n</code></pre> <p>Generate the full URL.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The complete URL with all operations and filters applied.</p> </li> </ul>"},{"location":"reference/imgora/#imgora.WsrvNl.url(with_image)","title":"<code>with_image</code>","text":"(<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>The image to use. If None, the default image is used.</p>"},{"location":"reference/imgora/#imgora.WsrvNl.url(with_base)","title":"<code>with_base</code>","text":"(<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>The base URL to use. If None, the default base URL is used.</p>"},{"location":"reference/imgora/#imgora.WsrvNl.url(signer)","title":"<code>signer</code>","text":"(<code>Signer | None</code>, default:                   <code>None</code> )           \u2013            <p>The signer to use. If None the default is used.</p>"},{"location":"reference/imgora/#imgora.WsrvNl.sign_path","title":"sign_path","text":"<pre><code>sign_path(path: str, signer: Signer | None = None) -&gt; str\n</code></pre> <p>Sign a URL path using HMAC.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The signature.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>ValueError</code>             \u2013            <p>If no key is configured for signing.</p> </li> </ul>"},{"location":"reference/imgora/#imgora.WsrvNl.sign_path(path)","title":"<code>path</code>","text":"(<code>str</code>)           \u2013            <p>The URL path to sign. The path is not encoded, this needs to be done previously.</p>"},{"location":"reference/imgora/#imgora.WsrvNl.sign_path(signer)","title":"<code>signer</code>","text":"(<code>Signer | None</code>, default:                   <code>None</code> )           \u2013            <p>The signer to use. If None the default is used.</p>"},{"location":"reference/imgora/#imgora.WsrvNl.encode_image_path","title":"encode_image_path","text":"<pre><code>encode_image_path(path: str) -&gt; str\n</code></pre> <p>Encode the image path with <code>urllib.parse.quote</code>.</p>"},{"location":"reference/imgora/#imgora.WsrvNl.sign","title":"sign","text":"<pre><code>sign(\n    unsafe: bool = False, signer: Signer | None = None\n) -&gt; Self\n</code></pre> <p>Set the signer.</p> <p>Parameters:</p>"},{"location":"reference/imgora/#imgora.WsrvNl.sign(unsafe)","title":"<code>unsafe</code>","text":"(<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>If True, skip URL signing even if a key is configured.</p>"},{"location":"reference/imgora/#imgora.WsrvNl.sign(signer)","title":"<code>signer</code>","text":"(<code>Signer | None</code>, default:                   <code>None</code> )           \u2013            <p>The signer to use. If None the default is used.</p>"},{"location":"reference/imgora/#imgora.WsrvNl.unsafe","title":"unsafe","text":"<pre><code>unsafe() -&gt; Self\n</code></pre> <p>Set the signer to unsafe.</p>"},{"location":"reference/imgora/#imgora.WsrvNl.get_size","title":"get_size","text":"<pre><code>get_size(original: bool = False) -&gt; tuple[int, int]\n</code></pre> <p>Returns the image size.</p>"},{"location":"reference/imgora/#imgora.WsrvNl.trim","title":"trim","text":"<pre><code>trim() -&gt; Self\n</code></pre> <p>Trim the image.</p>"},{"location":"reference/imgora/#imgora.WsrvNl.brightness","title":"brightness","text":"<pre><code>brightness(amount: int) -&gt; Self\n</code></pre> <p>Adjust brightness of the image.</p> <p>Parameters:</p>"},{"location":"reference/imgora/#imgora.WsrvNl.brightness(amount)","title":"<code>amount</code>","text":"(<code>int</code>)           \u2013            <p><code>-100</code> to <code>100</code>. The amount (in %) to change the image brightness.     Positive numbers make the image brighter and negative numbers make the image darker.</p>"},{"location":"reference/imgora/#imgora.WsrvNl.rgb","title":"rgb","text":"<pre><code>rgb(r: float = 0, g: float = 0, b: float = 0) -&gt; Self\n</code></pre> <p>Adjust the RGB channels of the image.</p> <p>Parameters:</p>"},{"location":"reference/imgora/#imgora.WsrvNl.rgb(r)","title":"<code>r</code>","text":"(<code>float</code>, default:                   <code>0</code> )           \u2013            <p><code>-100</code> to <code>100</code>. Red channel adjustment.</p>"},{"location":"reference/imgora/#imgora.WsrvNl.rgb(g)","title":"<code>g</code>","text":"(<code>float</code>, default:                   <code>0</code> )           \u2013            <p><code>-100</code> to <code>100</code>. Green channel adjustment.</p>"},{"location":"reference/imgora/#imgora.WsrvNl.rgb(b)","title":"<code>b</code>","text":"(<code>float</code>, default:                   <code>0</code> )           \u2013            <p><code>-100</code> to <code>100</code>. Blue channel adjustment.</p>"},{"location":"reference/imgora/#imgora.WsrvNl.quality","title":"quality","text":"<pre><code>quality(amount: int) -&gt; Self\n</code></pre> <p>Set the image quality (JPEG only).</p> <p>Parameters:</p>"},{"location":"reference/imgora/#imgora.WsrvNl.quality(amount)","title":"<code>amount</code>","text":"(<code>int</code>)           \u2013            <p>Quality percentage (1-100).</p>"},{"location":"reference/imgora/#imgora.WsrvNl.radius","title":"radius","text":"<pre><code>radius(\n    rx: int, ry: int | None = None, color: str | None = None\n) -&gt; Self\n</code></pre> <p>Add rounded corners to the image (alias for round_corner).</p> <p>Parameters:</p>"},{"location":"reference/imgora/#imgora.WsrvNl.radius(rx)","title":"<code>rx</code>","text":"(<code>int</code>)           \u2013            <p>X radius of the corners in pixels.</p>"},{"location":"reference/imgora/#imgora.WsrvNl.radius(ry)","title":"<code>ry</code>","text":"(<code>int | None</code>, default:                   <code>None</code> )           \u2013            <p>Y radius of the corners in pixels (defaults to rx).</p>"},{"location":"reference/imgora/#imgora.WsrvNl.radius(color)","title":"<code>color</code>","text":"(<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>Corner color in CSS format (default: \"none\").</p>"},{"location":"reference/imgora/#imgora.WsrvNl.path","title":"path","text":"<pre><code>path(\n    with_image: str | None = None,\n    encode_image: bool = True,\n    signer: Signer | None = None,\n) -&gt; str\n</code></pre>"},{"location":"reference/imgora/#imgora.WsrvNl.resize","title":"resize","text":"<pre><code>resize(\n    width: int,\n    height: int,\n    method: Literal[\n        \"fit-in\",\n        \"stretch\",\n        \"smart\",\n        \"focal\",\n        \"cover\",\n        \"inside\",\n        \"fill\",\n    ]\n    | None = None,\n    upscale: bool = True,\n) -&gt; Self\n</code></pre> <p>Resize the image to the exact dimensions.</p> <p>Parameters:</p>"},{"location":"reference/imgora/#imgora.WsrvNl.resize(width)","title":"<code>width</code>","text":"(<code>int</code>)           \u2013            <p>Target width in pixels.</p>"},{"location":"reference/imgora/#imgora.WsrvNl.resize(height)","title":"<code>height</code>","text":"(<code>int</code>)           \u2013            <p>Target height in pixels.</p>"},{"location":"reference/imgora/#imgora.WsrvNl.resize(method)","title":"<code>method</code>","text":"(<code>Literal['fit-in', 'stretch', 'smart', 'focal', 'cover', 'inside', 'fill'] | None</code>, default:                   <code>None</code> )           \u2013            <p>Resizing method (fit-in, stretch, smart).</p>"},{"location":"reference/imgora/#imgora.WsrvNl.resize(upscale)","title":"<code>upscale</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Whether to upscale the image.</p>"},{"location":"reference/imgora/#imgora.WsrvNl.crop","title":"crop","text":"<pre><code>crop(\n    left: int | float | None = None,\n    top: int | float | None = None,\n    right: int | float | None = None,\n    bottom: int | float | None = None,\n    width: int | float | None = None,\n    height: int | float | None = None,\n    halign: HALIGN | None = None,\n    valign: VALIGN | None = None,\n    prcrop: bool = True,\n) -&gt; Self\n</code></pre> <p>Manually crop the image. Coordinates are in pixel or float values between 0 and 1 (percentage of image dimensions) The coordiantes start in the top/left corner and go down and right.</p> <p>Coordinate system:</p> <pre><code>    0    5    10          x\n  0 *=============*-------&gt;\n    #    .    .   #\n  2 #....+~~~~~+  #\n    # . .|     |  #\n  4 # . .+~~~~~+  #\n    *=============*\n    |\n  y v\n</code></pre> <pre><code>img.crop(left=5, top=2, right=10, bottom=4)\nimg.crop(left=5, top=2, right=-4, bottom=-2)\nimg.crop(left=5, top=2, width=5, height=2)\nimg.crop(left=0.3, top=0.42, width=0.5, height=0.4)\n</code></pre> <p>Parameters:</p>"},{"location":"reference/imgora/#imgora.WsrvNl.crop(left)","title":"<code>left</code>","text":"(<code>int | float | None</code>, default:                   <code>None</code> )           \u2013            <p>Left coordinate of the crop (pixel or relative).</p>"},{"location":"reference/imgora/#imgora.WsrvNl.crop(top)","title":"<code>top</code>","text":"(<code>int | float | None</code>, default:                   <code>None</code> )           \u2013            <p>Top coordinate of the crop (pixel or relative).</p>"},{"location":"reference/imgora/#imgora.WsrvNl.crop(right)","title":"<code>right</code>","text":"(<code>int | float | None</code>, default:                   <code>None</code> )           \u2013            <p>Right coordinate of the crop (pixel or relative), can be negative.</p>"},{"location":"reference/imgora/#imgora.WsrvNl.crop(bottom)","title":"<code>bottom</code>","text":"(<code>int | float | None</code>, default:                   <code>None</code> )           \u2013            <p>Bottom coordinate of the crop (pixel or relative), can be negative.</p>"},{"location":"reference/imgora/#imgora.WsrvNl.crop(width)","title":"<code>width</code>","text":"(<code>int | float | None</code>, default:                   <code>None</code> )           \u2013            <p>Width of the crop (pixel or relative).</p>"},{"location":"reference/imgora/#imgora.WsrvNl.crop(height)","title":"<code>height</code>","text":"(<code>int | float | None</code>, default:                   <code>None</code> )           \u2013            <p>Height of the crop (pixel or relative).</p>"},{"location":"reference/imgora/#imgora.WsrvNl.crop(halign)","title":"<code>halign</code>","text":"(<code>HALIGN | None</code>, default:                   <code>None</code> )           \u2013            <p>Horizontal alignment of the crop (left, center, right).</p>"},{"location":"reference/imgora/#imgora.WsrvNl.crop(valign)","title":"<code>valign</code>","text":"(<code>VALIGN | None</code>, default:                   <code>None</code> )           \u2013            <p>Vertical alignment of the crop (top, middle, bottom).</p>"},{"location":"reference/imgora/#imgora.WsrvNl.grayscale","title":"grayscale","text":"<pre><code>grayscale() -&gt; Self\n</code></pre> <p>Convert the image to grayscale.</p>"},{"location":"reference/imgora/#imgora.WsrvNl.upscale","title":"upscale","text":"<pre><code>upscale(upscale: bool = True) -&gt; Self\n</code></pre> <p>upscale the image if fit-in is used</p> <p>This only makes sense with <code>fit-in</code> or <code>inside</code>.</p> <p>Parameters:</p>"},{"location":"reference/imgora/#imgora.WsrvNl.upscale(upscale)","title":"<code>upscale</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Whether to upscale the image. Defaults to True.</p>"},{"location":"reference/imgora/#imgora.WsrvNl.rotate","title":"rotate","text":"<pre><code>rotate(angle: int | None = None) -&gt; Self\n</code></pre> <p>Rotate the given image by the specified angle after processing.</p> <p>This is different from the 'orient' filter which rotates the image before processing.</p> <p>Parameters:</p>"},{"location":"reference/imgora/#imgora.WsrvNl.rotate(angle)","title":"<code>angle</code>","text":"(<code>int | None</code>, default:                   <code>None</code> )           \u2013            <p>Rotation angle.</p>"},{"location":"reference/imgora/#imgora.WsrvNl.background_color","title":"background_color","text":"<pre><code>background_color(color: str) -&gt; Self\n</code></pre> <p>The <code>background_color</code> filter sets the background layer to the specified color. This is specifically useful when converting transparent images (PNG) to JPEG.</p> <p>Parameters:</p>"},{"location":"reference/imgora/#imgora.WsrvNl.background_color(color)","title":"<code>color</code>","text":"(<code>str</code>)           \u2013            <p>Background color in hex format without # or 'auto' (e.g., 'FFFFFF', 'aab').</p>"},{"location":"reference/imgora/#imgora.WsrvNl.blur","title":"blur","text":"<pre><code>blur(\n    radius: int | None = None,\n    sigma: int | float | None = None,\n) -&gt; Self\n</code></pre> <p>Apply gaussian blur to the image.</p> <p>Parameters:</p>"},{"location":"reference/imgora/#imgora.WsrvNl.blur(radius)","title":"<code>radius</code>","text":"(<code>int | None</code>, default:                   <code>None</code> )           \u2013            <p>Radius of the blur effect (0-150). The bigger the radius, the more blur.</p>"},{"location":"reference/imgora/#imgora.WsrvNl.blur(sigma)","title":"<code>sigma</code>","text":"(<code>int | float | None</code>, default:                   <code>None</code> )           \u2013            <p>Standard deviation of the gaussian kernel, defaults to <code>radius</code>. (not supported)</p>"},{"location":"reference/imgora/#imgora.WsrvNl.contrast","title":"contrast","text":"<pre><code>contrast(amount: int) -&gt; Self\n</code></pre> <p>Adjust contrast of the image.</p> <p>Parameters:</p>"},{"location":"reference/imgora/#imgora.WsrvNl.contrast(amount)","title":"<code>amount</code>","text":"(<code>int</code>)           \u2013            <p><code>-100</code> to <code>100</code>. The amount (in %) to change the image contrast.      Positive numbers increase contrast and negative numbers decrease contrast.</p>"},{"location":"reference/imgora/#imgora.WsrvNl.sharpen","title":"sharpen","text":"<pre><code>sharpen(\n    sigma: float | None = None,\n    flat: int | None = None,\n    jagged: int | None = None,\n) -&gt; Self\n</code></pre> <p>Sharpen the image.</p> <p>Parameters:</p>"},{"location":"reference/imgora/#imgora.WsrvNl.sharpen(sigma)","title":"<code>sigma</code>","text":"(<code>float | None</code>, default:                   <code>None</code> )           \u2013            <p><code>0.000001</code> to <code>10</code>. Standard deviation of the gaussian kernel.</p>"},{"location":"reference/imgora/#imgora.WsrvNl.sharpen(flat)","title":"<code>flat</code>","text":"(<code>int | None</code>, default:                   <code>None</code> )           \u2013            <p><code>0</code> to <code>1000000</code>. Flatness of the sharpening effect.</p>"},{"location":"reference/imgora/#imgora.WsrvNl.sharpen(jagged)","title":"<code>jagged</code>","text":"(<code>int | None</code>, default:                   <code>None</code> )           \u2013            <p><code>0</code> to <code>1000000</code>. Jaggedness of the sharpening effect.</p>"},{"location":"reference/imgora/#imgora.WsrvNl.focal","title":"focal","text":"<pre><code>focal(\n    left: int | float | None = None,\n    top: int | float | None = None,\n    right: int | float | None = None,\n    bottom: int | float | None = None,\n) -&gt; Self\n</code></pre> <p>Set the focal point of the image, which is used in later transforms (e.g. <code>crop</code>). Only a point is supported by wsrv.nl. For this you can use left and top, if right and bottom is used as well it calculates the center of the region.</p> <p>Parameters:</p> <p>Warning</p> <p>wsrv.nl only supports a point as focal region, if right and bottom is specified it calculates the center of the region.</p>"},{"location":"reference/imgora/#imgora.WsrvNl.focal(left)","title":"<code>left</code>","text":"(<code>int | float | None</code>, default:                   <code>None</code> )           \u2013            <p>Left or x coordinate of the focal region/point, either in pixel or relative (float from 0 to 1).</p>"},{"location":"reference/imgora/#imgora.WsrvNl.focal(top)","title":"<code>top</code>","text":"(<code>int | float | None</code>, default:                   <code>None</code> )           \u2013            <p>Top or y coordinate of the focal region/point, either in pixel or relative (float from 0 to 1).</p>"},{"location":"reference/imgora/#imgora.WsrvNl.focal(right)","title":"<code>right</code>","text":"(<code>int | float | None</code>, default:                   <code>None</code> )           \u2013            <p>Right coordinate of the focal region, either in pixel or relative (float from 0 to 1).</p>"},{"location":"reference/imgora/#imgora.WsrvNl.focal(bottom)","title":"<code>bottom</code>","text":"(<code>int | float | None</code>, default:                   <code>None</code> )           \u2013            <p>Bottom coordinate of the focal region, either in pixel or relative (float from 0 to 1).</p>"},{"location":"reference/imgora/#imgora.WsrvNl.format","title":"format","text":"<pre><code>format(\n    fmt: Literal[\"jpeg\", \"jpg\", \"png\", \"webp\", \"tiff\"],\n    quality: int | None = None,\n    filename: str | None = None,\n) -&gt; Self\n</code></pre> <p>Convert the image to the specified format.</p> <p>Parameters:</p>"},{"location":"reference/imgora/#imgora.WsrvNl.format(fmt)","title":"<code>fmt</code>","text":"(<code>Literal['jpeg', 'jpg', 'png', 'webp', 'tiff']</code>)           \u2013            <p>Output format (jpg, png, webp, tiff, etc.).</p>"},{"location":"reference/imgora/#imgora.WsrvNl.format(quality)","title":"<code>quality</code>","text":"(<code>int | None</code>, default:                   <code>None</code> )           \u2013            <p><code>1</code> to <code>100</code>. Quality setting for lossy formats (e.g. jpg, does nothing for png).</p>"},{"location":"reference/imgora/#imgora.WsrvNl.format(filename)","title":"<code>filename</code>","text":"(<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>Output filename, only alphanumeric characters are allowed. Without extension.</p>"},{"location":"reference/imgora/#imgora.WsrvNl.round_corner","title":"round_corner","text":"<pre><code>round_corner(\n    rx: int | None = None,\n    ry: int | None = None,\n    color: str | None | tuple[int, int, int] = None,\n) -&gt; Self\n</code></pre> <p>Add rounded corners to the image, it is not supported by wsrv.nl.</p> <p>Parameters:</p>"},{"location":"reference/imgora/#imgora.WsrvNl.round_corner(rx)","title":"<code>rx</code>","text":"(<code>int | None</code>, default:                   <code>None</code> )           \u2013            <p>X radius of the corners in pixels.</p>"},{"location":"reference/imgora/#imgora.WsrvNl.round_corner(ry)","title":"<code>ry</code>","text":"(<code>int | None</code>, default:                   <code>None</code> )           \u2013            <p>Y radius of the corners in pixels (not supported at the moment).</p>"},{"location":"reference/imgora/#imgora.WsrvNl.round_corner(color)","title":"<code>color</code>","text":"(<code>str | None | tuple[int, int, int]</code>, default:                   <code>None</code> )           \u2013            <p>Corner color in CSS format (default: \"none\"), if none is used transparent background is used if possible.</p>"},{"location":"reference/imgora/#imgora.WsrvNl.meta","title":"meta","text":"<pre><code>meta() -&gt; Self\n</code></pre> <p>Shows meta information of the image.</p>"},{"location":"reference/imgora/decorator/","title":"decorator","text":""},{"location":"reference/imgora/decorator/#imgora.decorator","title":"decorator","text":"<p>Decorators for imgora.</p> <p>This module provides decorators for imgora.</p> <p>Examples:</p> <pre><code>from imgora import Imagor, Signer\nfrom imgora.decorator import filter, operation, chained_method\n\nclass MyImagor(Imagor):\n    @filter\n    def my_filter(self, arg1: int, arg2: str) -&gt; Self:\n        self.add_filter(\"my_filter\", arg1, arg2)\n\n    @operation\n    def my_operation(self, arg1: int, arg2: str) -&gt; Self:\n        self.add_operation(\"my_operation\", arg1, arg2)\n\n    @chained_method\n    def with_image(self, image: str) -&gt; Self:\n        self._image = image.replace(\"jpeg\", \"jpg\")\n</code></pre> <p>Functions:</p> <ul> <li> <code>chain</code>             \u2013              <p>Decorator for methods that return a new instance with modifications.</p> </li> </ul>"},{"location":"reference/imgora/decorator/#imgora.decorator-functions","title":"Functions","text":""},{"location":"reference/imgora/decorator/#imgora.decorator.chain","title":"chain","text":"<pre><code>chain(method: _F) -&gt; _F\n</code></pre> <p>Decorator for methods that return a new instance with modifications.</p> <p>The decorated method should modify the instance in-place and not return anything. The decorator will handle creating and returning the new instance.</p>"}]}